var O=Object.defineProperty,I=Object.defineProperties;var j=Object.getOwnPropertyDescriptors;var f=Object.getOwnPropertySymbols;var M=Object.prototype.hasOwnProperty,P=Object.prototype.propertyIsEnumerable;var x=(e,t,r)=>t in e?O(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,p=(e,t)=>{for(var r in t||(t={}))M.call(t,r)&&x(e,r,t[r]);if(f)for(var r of f(t))P.call(t,r)&&x(e,r,t[r]);return e},h=(e,t)=>I(e,j(t));import{t7 as E,tv as N,t8 as J,u3 as L,u4 as T,mi as U,mj as q,mk as F,ml as R,t9 as k,tc as A,tt as z,dl as K,ba as V,b0 as C,e4 as D,u5 as S,u6 as w,u7 as G,c4 as $,cT as b,b8 as H,bR as W,nP as B,te as _,aX as i,aY as n,gN as X,eU as Y,u8 as Z,gO as Q,mp as ee,aZ as te}from"./vendor.c8f3cc8c.js";import{c as re}from"./ExportImageParameters.04d6f4d0.js";let s=class extends E(N(J(L(T(U(q(F(R(k(A(z(K(V))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return typeof e=="string"?p({url:e},t):e}load(e){const t=C(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(D).then(()=>this._fetchService(t))),Promise.resolve(this)}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.indexOf("PNG32")>-1?"png32":"png24"}writeSublayers(e,t,r,a){if(!this.loaded||!e)return;const u=e.slice().reverse().flatten(({sublayers:o})=>o&&o.toArray().reverse()).toArray();let l=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const o=S(a.origin);if(o===3){const c=this.createSublayersForOrigin("service").sublayers;l=w(u,c,2)}else if(o>3){const c=this.createSublayersForOrigin("portal-item");l=w(u,c.sublayers,S(c.origin))}}const y=[],d=p({writeSublayerStructure:l},a);let m=l;u.forEach(o=>{const c=o.write({},d);y.push(c),m=m||o.originOf("visible")==="user"}),y.some(o=>Object.keys(o).length>1)&&(t.layers=y),m&&(t.visibleLayers=u.filter(o=>o.visible).map(o=>o.id))}createExportImageParameters(e,t,r,a){const u=a&&a.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const l=new re({layer:this,floors:a==null?void 0:a.floors,scale:G({extent:e,width:t})*u}),y=l.toJSON();l.destroy();const d=!a||!a.rotation||this.version<10.3?{}:{rotation:-a.rotation},m=e&&e.spatialReference,o=m.wkid||JSON.stringify(m.toJSON());y.dpi*=u;const c={};if(a!=null&&a.timeExtent){const{start:g,end:v}=a.timeExtent.toJSON();c.time=g&&v&&g===v?""+g:`${g==null?"null":g},${v==null?"null":v}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return p(p(p({bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:o,imageSR:o,size:t+","+r},y),d),c)}async fetchImage(e,t,r,a){var u;const l={responseType:"image",signal:(u=a==null?void 0:a.signal)!=null?u:null,query:h(p(p(h(p(p({},this.parsedUrl.query),this.createExportImageParameters(e,t,r,a)),{f:"image"}),this.refreshParameters),this.customParameters),{token:this.apiKey})},y=this.parsedUrl.path+"/export";return l.query.dynamicLayers!=null&&!this.capabilities.exportMap.supportsDynamicLayers?Promise.reject(new $("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query})):b(y,l).then(d=>d.data).catch(d=>{throw H(d)?d:new $("mapimagelayer:image-fetch-error",`Unable to load image: ${y}`,{error:d})})}async fetchRecomputedExtents(e={}){const t=h(p({},e),{query:h(p({returnUpdates:!0,f:"json"},this.customParameters),{token:this.apiKey})}),{data:r}=await b(this.url,t),{extent:a,fullExtent:u,timeExtent:l}=r,y=a||u;return{fullExtent:y&&W.fromJSON(y),timeExtent:l&&B.fromJSON({start:l[0],end:l[1]})}}loadAll(){return _(this,e=>{e(this.allSublayers)})}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await b(this.parsedUrl.path,{query:h(p(p({f:"json"},this.parsedUrl.query),this.customParameters),{token:this.apiKey}),signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}};i([n({type:Boolean})],s.prototype,"datesInUnknownTimezone",void 0),i([n()],s.prototype,"dpi",void 0),i([n()],s.prototype,"gdbVersion",void 0),i([n()],s.prototype,"imageFormat",void 0),i([X("imageFormat",["supportedImageFormatTypes"])],s.prototype,"readImageFormat",null),i([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],s.prototype,"imageMaxHeight",void 0),i([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],s.prototype,"imageMaxWidth",void 0),i([n()],s.prototype,"imageTransparency",void 0),i([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],s.prototype,"isReference",void 0),i([n({json:{read:!1,write:!1}})],s.prototype,"labelsVisible",void 0),i([n({type:["ArcGISMapServiceLayer"]})],s.prototype,"operationalLayerType",void 0),i([n({json:{read:!1,write:!1}})],s.prototype,"popupEnabled",void 0),i([n()],s.prototype,"sourceJSON",void 0),i([n({json:{write:{ignoreOrigin:!0}}})],s.prototype,"sublayers",void 0),i([Y("sublayers",{layers:{type:[Z]},visibleLayers:{type:[Q]}})],s.prototype,"writeSublayers",null),i([n({type:["show","hide","hide-children"]})],s.prototype,"listMode",void 0),i([n({json:{read:!1},readOnly:!0,value:"map-image"})],s.prototype,"type",void 0),i([n(ee)],s.prototype,"url",void 0),s=i([te("esri.layers.MapImageLayer")],s);const oe=s;export{oe as default};
