var b=Object.defineProperty,j=Object.defineProperties;var T=Object.getOwnPropertyDescriptors;var f=Object.getOwnPropertySymbols;var V=Object.prototype.hasOwnProperty,q=Object.prototype.propertyIsEnumerable;var p=(e,t,i)=>t in e?b(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,m=(e,t)=>{for(var i in t||(t={}))V.call(t,i)&&p(e,i,t[i]);if(f)for(var i of f(t))q.call(t,i)&&p(e,i,t[i]);return e},d=(e,t)=>j(e,T(t));import{X as U,eg as C,an as y,mj as Q,mu as L,mv as R,eh as S,g as n,c_ as w,e as g,d as x,i as k}from"./index.988b09cd.js";import{r as z,o as _,n as I}from"./imageUtils.b598775c.js";import{l as F}from"./LayerView2D.8eaa8439.js";import{i as P}from"./RefreshableLayerView.c8d2ecf1.js";import{i as E}from"./TileLayerView.6cfac3be.js";import"./vendor.c6be4c00.js";import"./index.25aa0880.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./BitmapTileContainer.ff6335f5.js";import"./Bitmap.7e32071f.js";import"./brushes.0945eb3a.js";import"./definitions.21e97413.js";import"./Utils.56a5b8e8.js";import"./number.dfbabd3f.js";import"./programUtils.cffd2d5b.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.d5a4d0f6.js";import"./pixelUtils.5acf42e1.js";import"./TileContainer.d9e05cad.js";import"./WGLContainer.c4152aca.js";import"./Container.b0eab594.js";import"./EffectView.8c4917f2.js";const D=U.getLogger("esri.views.2d.layers.TileLayerView2D"),G=[0,0];let h=class extends E(P(z(F(C)))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}initialize(){const e=this.layer.tileInfo,t=e&&e.spatialReference;let i;t||(i=new y("layerview:tiling-information-missing","The layer doesn't provide tiling information",{layer:this.layer})),t.equals(this.view.spatialReference)||(i=new y("layerview:spatial-reference-incompatible","The spatial reference of this layer does not meet the requirements of the view",{layer:this.layer})),this.watch("resampling",()=>{this.doRefresh()}),i&&this.addResolvingPromise(Promise.reject(i))}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume(),this.notifyChange("updating")}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null;this._tileInfoView=new Q(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new L({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(t,i)=>this.fetchTile(t,i)}),this._tileStrategy=new R({cachePolicy:"keep",resampling:this.resampling,acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),this.requestUpdate(),this.container.requestRender(),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQueryGeometry(e,t){return S(e,t,this.view)}async doRefresh(){this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(e=>this._enqueueTileFetch(e)),this.notifyChange("updating"))}isUpdating(){var e;return((e=this._fetchQueue)==null?void 0:e.length)>0}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(G,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",()=>e.destroy()),this.requestUpdate()}async fetchTile(e,t={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:a,resamplingLevel:o=0}=t;if(!i)try{return await this._fetchImage(e,a)}catch(s){if(!n(s)&&!this.resampling)return _(this._tileInfoView.tileInfo.size);if(o<3){const c=this._tileInfoView.getTileParentId(e.id);if(c){const u=new w(c),v=await this.fetchTile(u,d(m({},t),{resamplingLevel:o+1}));return I(this._tileInfoView,v,u,e)}}throw s}const r=new w(0,0,0,0);let l;try{if(await i.fetchAvailabilityUpsample(e.level,e.row,e.col,r,{signal:a}),r.level!==e.level&&!this.resampling)return _(this._tileInfoView.tileInfo.size);l=await this._fetchImage(r,a)}catch(s){if(n(s))throw s;l=await this._fetchImage(e,a)}return this.resampling?I(this._tileInfoView,l,r,e):l}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",()=>this.requestUpdate())}catch(t){n(t)||D.error(t)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchTile(e.level,e.row,e.col,{signal:t})}};g([x()],h.prototype,"resampling",null),h=g([k("esri.views.2d.layers.TileLayerView2D")],h);const fe=h;export{fe as default};
