var qe=Object.defineProperty;var ve=Object.getOwnPropertySymbols;var Ne=Object.prototype.hasOwnProperty,Ze=Object.prototype.propertyIsEnumerable;var be=(a,e,t)=>e in a?qe(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t,ne=(a,e)=>{for(var t in e||(e={}))Ne.call(e,t)&&be(a,t,e[t]);if(ve)for(var t of ve(e))Ze.call(e,t)&&be(a,t,e[t]);return a};import{cQ as De,cL as H,b0 as w,dK as Ce,dL as Xe,bv as Be,cv as T,dM as q,b5 as U,dN as Ye,dO as Qe,dP as ae,dQ as le,dR as We,dS as Je,dT as et,dU as tt,dV as N,dW as we,dX as he,dY as st,dZ as Te,d_ as it,d$ as rt,e0 as ot,d0 as Z,bC as nt,dl as at,a_ as lt,e1 as ht,bA as x,e2 as dt,e3 as ct,b8 as X,ar as ut,e4 as Fe,e5 as Ie,e6 as ft,e7 as Re,e8 as Me,e9 as pt,ea as mt,eb as gt,aX as F,aY as I,aZ as yt,dF as _t,da as Se,cN as xt,ec as vt,ed as bt,ee as Dt,ef as Ct,eg as Bt,eh as wt,ei as Tt}from"./vendor.c8f3cc8c.js";import{N as Le,z as Ft,D as It,n as Rt}from"./CIMSymbolHelper.05203bfb.js";import{u as Mt}from"./normalizeUtilsSync.dd7ec7e5.js";import{f as St,g as Lt}from"./projectionSupport.a9ad5f38.js";import{P as zt}from"./definitions.21e97413.js";import{R as de,j as Y,X as ce,_ as At,Z as Gt,$ as Q,I as ue,E as R,z as Ot,i as $t,n as Ut}from"./Utils.b2b84829.js";import{f as jt,i as Vt,o as Pt}from"./FeatureContainer.f5fb900c.js";import{a as W,o as kt,j as Kt,l as Et,E as Ht}from"./Matcher.b81ee078.js";import{h as ze,p as Ae,u as D,y as Ge,_ as qt,g as Nt,z as Zt,d as Xt,c as M}from"./schemaUtils.3bffe16f.js";import{d as Yt,r as Qt,M as Wt}from"./ComputedAttributeStorage.8a8199a7.js";import{b as Jt}from"./FeatureSetReader.2ffb1ded.js";import{l as es}from"./cimSymbolUtils.441175f3.js";import{t as ts}from"./GraphicsView.991cf1e8.js";const m=-1;class Oe{constructor(){this._dirties=[{vertexFrom:m,vertexCount:m,indexFrom:m,indexCount:m,allDirty:!1},{vertexFrom:m,vertexCount:m,indexFrom:m,indexCount:m,allDirty:!1},{vertexFrom:m,vertexCount:m,indexFrom:m,indexCount:m,allDirty:!1},{vertexFrom:m,vertexCount:m,indexFrom:m,indexCount:m,allDirty:!1},{vertexFrom:m,vertexCount:m,indexFrom:m,indexCount:m,allDirty:!1}]}hasDirty(){return this._dirties.some(e=>e.indexCount!==m||e.allDirty)}markAllClean(){for(const e of this._dirties)e.indexFrom=m,e.indexCount=m,e.vertexFrom=m,e.vertexCount=m,e.allDirty=!1}markAllDirty(){for(const e of this._dirties)e.allDirty=!0}forEach(e){for(let t=0;t<this._dirties.length;++t){const{indexCount:s,indexFrom:i,vertexCount:r,vertexFrom:o,allDirty:n}=this._dirties[t],h={};let d,l=!1;(n||o!==m&&r>0)&&(h.geometry={count:r,from:o,allDirty:n},l=!0),(n||i!==m&&s>0)&&(d={count:s,from:i,allDirty:n},l=!0),l&&e({indices:d,vertices:h},t)}}markDirtyIndices(e,t,s){const i=this._dirties[e],r=t,o=s;if(!i.allDirty)if(i.indexCount!==m){const n=Math.min(i.indexFrom,r),h=Math.max(i.indexFrom+i.indexCount,r+o)-n;i.indexFrom=n,i.indexCount=h}else i.indexFrom=r,i.indexCount=o}markDirtyVertices(e,t,s,i){const r=this._dirties[e],o=s,n=i;if(!r.allDirty)if(r.vertexCount!==m){const h=Math.min(r.vertexFrom,o),d=Math.max(r.vertexFrom+r.vertexCount,o+n)-h;r.vertexFrom=h,r.vertexCount=d}else r.vertexFrom=o,r.vertexCount=n}}class ss{constructor(e){this._largestRange=null,this._parent=e,this._updateLargestRange()}get largestRange(){return this._largestRange}rangeCreated(e){(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}rangeResized(e,t){e===this._largestRange?e.count<t&&this._updateLargestRange():(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}findBestRange(e){let t=this._parent._freeHead,s=null;for(;t!==null;)t.count>=e&&(!s||t.count-e<s.count-e)&&(s=t),t=t.next;return s}findAdjacentRanges(e,t){let s=!0,i=!1,r=null,o=this._parent._freeHead;for(;s&&!i;){const n=r!==null?r.from+r.count:0,h=o!==null?o.from:this._parent._size;e>=n&&e+t<=h?(s=!1,i=!0):o!==null?(r=o,o=o.next):s=!1}return[r,o]}_updateLargestRange(){let e=null,t=this._parent._freeHead;for(;t!==null;)(!e||t.count>e.count)&&(e=t),t=t.next;this._largestRange=e}}class v{constructor(e,t){this._allocated=0,this._size=e,this._freeHead=e>0?{from:0,count:e,prev:null,next:null}:null,this._bookKeeper=t||new ss(this),this._freeHead&&this._bookKeeper.rangeCreated(this._freeHead)}allocate(e){const t=this._bookKeeper.findBestRange(e);if(t===null)return-1;const s=t.from,i=t.count;if(t.from+=e,t.count-=e,this._bookKeeper.rangeResized(t,s,i),this._allocated+=e,t.count===0){const r=t.prev!==null?this._freeHead:t.next;v._removeRange(t),this._freeHead=r}return s}free(e,t){const[s,i]=this._bookKeeper.findAdjacentRanges(e,t),r={from:e,count:t,prev:s,next:i};if(s!==null&&(s.next=r),i!==null&&(i.prev=r),this._bookKeeper.rangeCreated(r),this._allocated-=t,i!==null&&r.from+r.count===i.from){const o=r.from,n=r.count;v._fuse(r,i),v._removeRange(i),this._bookKeeper.rangeResized(r,o,n),this._bookKeeper.rangeResized(i,void 0,0)}if(s!==null&&s.from+s.count===r.from){const o=s.from,n=s.count;v._fuse(s,r),v._removeRange(r),this._bookKeeper.rangeResized(s,o,n),this._bookKeeper.rangeResized(r,void 0,0)}this._freeHead=r.prev!==null?this._freeHead:r}get fragmentation(){const e=this._size-this._allocated;return e===0?0:1-this._bookKeeper.largestRange.count/e}static _removeRange(e){e.prev!==null?e.next!==null?(e.prev.next=e.next,e.next.prev=e.prev):e.prev.next=null:e.next!==null&&(e.next.prev=null)}static _fuse(e,t){e.count+=t.count,e.next=t.next,t.from+=t.count,t.count=0,t.next!==null&&(t.next.prev=e)}}const j=["FILL","LINE","MARKER","TEXT","LABEL"];function is(a){const e=a.getStrides(),t={};for(let s=0;s<e.length;s++)t[j[s]]=e[s];return t}const $e=.5;class J{constructor(e,t,s,i){this._strides=e,this._displayList=t,this._freeListsAndStorage={},this._dirtyMap=null,this._dirtyMap=s;for(const r in e){this._freeListsAndStorage[r]={vtxFreeList:i?new v(i):null,idxFreeList:i?new v(i):null,vertexBuffers:{},indexBuffer:i?new Uint32Array(i):null};for(const o in e[r])this._freeListsAndStorage[r].vertexBuffers[o]={data:i?de(i,e[r][o]):null,stride:e[r][o]}}}static fromTileData(e,t){const s=is(e),i=[0,0,0,0,0],r=[0,0,0,0,0],o=e.tileDisplayData.displayObjects;for(const h of o)for(const d of h.displayRecords)i[d.geometryType]=Math.max(i[d.geometryType],d.vertexFrom+d.vertexCount),r[d.geometryType]=Math.max(r[d.geometryType],d.indexFrom+d.indexCount);const n=new J(s,e.tileDisplayData.displayList,t,null);for(let h=0;h<e.tileBufferData.geometries.length;++h){const d=i[h],l=r[h],c=e.tileBufferData.geometries[h],u=j[h],f=n._storageFor(u),p=e.tileBufferData.geometries[h].indexBuffer;let g;f.indexBuffer=p,f.idxFreeList=new v(p.length),f.idxFreeList.allocate(l);for(const _ in c.vertexBuffer){const y=e.tileBufferData.geometries[h].vertexBuffer[_];f.vertexBuffers[_].data=y.data,f.vertexBuffers[_].stride=y.stride;const oe=Y(y.stride),E=y.data.length*oe/y.stride;g||(g=E)}f.vtxFreeList=new v(g),f.vtxFreeList.allocate(d)}return n}delete(e){const t=j[e.geometryType];this._freeVertices(t,e.vertexFrom,e.vertexCount),this._freeIndices(t,e.indexFrom,e.indexCount),this._displayList.removeFromList(e),e.vertexFrom=void 0,e.indexFrom=void 0}setMeshData(e,t,s,i,r){const o=j[e.geometryType];let n,h;e.meshData=null,e.vertexFrom===void 0?(h=t.vertexCount,n=this._allocateVertices(o,h)):t.vertexCount>e.vertexCount?(this._freeVertices(o,e.vertexFrom,e.vertexCount),h=t.vertexCount,n=this._allocateVertices(o,h)):t.vertexCount===e.vertexCount?(n=e.vertexFrom,h=e.vertexCount):(this._freeVertices(o,e.vertexFrom+t.vertexCount,e.vertexCount-t.vertexCount),n=e.vertexFrom,h=t.vertexCount);let d,l,c,u=!0;if(e.indexFrom===void 0?(d=r,c=t.indexCount,l=this._allocateIndices(o,c)):t.indexCount>e.indexCount?(d=this._displayList.removeFromList(e),this._freeIndices(o,e.indexFrom,e.indexCount),c=t.indexCount,l=this._allocateIndices(o,c)):t.indexCount===e.indexCount?(u=!1,l=e.indexFrom,c=e.indexCount):(d=this._displayList.removeFromList(e),this._freeIndices(o,e.indexFrom+t.indexCount,e.indexCount-t.indexCount),l=e.indexFrom,c=t.indexCount),n!==-1&&l!==-1){const f=this._storageFor(o);if(ce(n,l,f.vertexBuffers,f.indexBuffer,t,s,i),e.vertexFrom=n,e.indexFrom=l,e.vertexCount=t.vertexCount,e.indexCount=t.indexCount,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const p in s)this._dirtyMap.markDirtyVertices(e.geometryType,p,e.vertexFrom,e.vertexCount)}return u&&this._displayList.addToList(e,d),!0}return n!==-1&&this._freeVertices(o,n,h),l!==-1&&this._freeIndices(o,l,c),e.setMeshDataFromBuffers(t,s,i),e.vertexFrom=void 0,e.vertexCount=0,e.indexFrom=void 0,e.indexCount=0,!1}tryAddMeshData(e,t){const s=t.vertexBuffer,i=t.indexBuffer,r=j[e.geometryType],o=this._allocateVertices(r,e.vertexCount);if(o===-1)return this._freeVertices(r,o,e.vertexCount),!1;const n=this._allocateIndices(r,e.indexCount);if(n===-1)return this._freeVertices(r,o,e.vertexCount),this._freeIndices(r,n,e.indexCount),!1;const h=this._storageFor(r);if(ce(o,n,h.vertexBuffers,h.indexBuffer,e,s,i),e.vertexFrom=o,e.indexFrom=n,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const d in s)this._dirtyMap.markDirtyVertices(e.geometryType,d,o,e.vertexCount)}return this._displayList.addToList(e),!0}_allocateVertices(e,t){const s=this._storageFor(e),i=s.vtxFreeList.allocate(t);return i===-1||s.vtxFreeList.fragmentation>$e?-1:i}_freeVertices(e,t,s){this._storageFor(e).vtxFreeList.free(t,s)}_freeIndices(e,t,s){this._storageFor(e).idxFreeList.free(t,s)}_allocateIndices(e,t){const s=this._storageFor(e),i=s.idxFreeList.allocate(t);return i===-1||s.idxFreeList.fragmentation>$e?-1:i}_storageFor(e){return this._freeListsAndStorage[e]}_stridesFor(e,t){return this._strides[e][t]}}class rs{constructor(e){this.geometryMap=At(()=>({indexBuffer:H.createIndex(e,35044),vao:null}),(t,s)=>({vertexBuffer:H.createVertex(e,Gt[s])}))}dispose(){for(let e=0;e<5;e++){const t=this.geometryMap[e];if(t){t.data.vao&&t.data.vao.dispose(!1),t.data.indexBuffer&&t.data.indexBuffer.dispose();for(const s in t.buffers)t.buffers[s]&&t.buffers[s].data.vertexBuffer.dispose()}}}get(e){const t=this.geometryMap[e];return{draw(s,i,r,o,n){if(!t.data.vao){const d={};for(const l in t.buffers)d[l]=t.buffers[l].data.vertexBuffer;t.data.vao=new De(s,r,i,d,t.data.indexBuffer)}const h=t.data.vao;s.bindVAO(h),s.drawElements(4,n,5125,Uint32Array.BYTES_PER_ELEMENT*o),s.bindVAO(null)}}}has(e){return this.geometryMap[e]!=null}upload(e,t){t.forEach((s,i)=>{this._upload(s,i,e)})}_upload(e,t,s){if(e.indices&&(e.indices.allDirty?this._uploadIndices(s,t):e.indices.from!=null&&e.indices.count!=null&&this._uploadIndices(s,t,e.indices.from,e.indices.count)),e.vertices){const i=e.vertices;for(const r in i){const o=i[r];o.allDirty?this._uploadVertices(s,t,r):o.from!=null&&o.count!=null&&this._uploadVertices(s,t,r,o.from,o.count)}}}_uploadVertices(e,t,s,i,r){const o=this.geometryMap[t];if(!o)return;const n=e.geometries[t].vertexBuffer[s];if(!n)return;const h=n.stride,d=n.data.buffer;o.buffers[s]&&d.byteLength>0&&(i!=null&&r!=null?o.buffers[s].data.vertexBuffer.setSubData(d,i*h,i*h,(i+r)*h):o.buffers[s].data.vertexBuffer.setData(d))}_uploadIndices(e,t,s,i){const r=this.geometryMap[t];if(!r)return;const o=4,n=e.geometries[t].indexBuffer.buffer;r.data.indexBuffer&&n.byteLength>0&&(s!=null&&i!=null?r.data.indexBuffer.setSubData(n,s*o,s*o,(s+i)*o):r.data.indexBuffer.setData(n))}}class os extends jt{constructor(){super(...arguments),this._data=null,this._displayList=null,this._lastCommitTime=0,this._hasData=!1,this._invalidated=!1,this._wglBuffers=null,this._dirtyMap=new Oe}destroy(){super.destroy(),this.clear()}get hasData(){return!!this._hasData}get displayObjects(){var e;return(e=this._displayObjects)!=null?e:[]}getGeometry(e){return this._wglBuffers&&this._wglBuffers.has(e)?this._wglBuffers.get(e):null}getDisplayList(){return this._displayList}patch(e){if(e.clear===!0)return this.clear(),void(this._hasData=!1);const t=e.addOrUpdate,s=e.remove;!this._data&&t&&t.tileDisplayData.displayObjects.length?(t.tileDisplayData.computeDisplayList(),this._dirtyMap=new Oe,this._dispRecStore=J.fromTileData(t,this._dirtyMap),this._data=t,this._dirtyMap.markAllDirty(),this._hasData=!0,e.end&&this.ready()):this._data&&(t&&t.tileDisplayData.displayObjects.length||s.length)?this._doPatchData(e):e.end&&this.ready(),e.end&&!this._data&&this.clear(),this.requestRender(),this.emit("change")}commit(e){e.time&&e.time===this._lastCommitTime||(this._lastCommitTime=e.time,this.visible&&this._data&&(this._wglBuffers||(this._wglBuffers=new rs(e.context)),(this._dirtyMap.hasDirty()||this._invalidated)&&(this._invalidated=!1,this._wglBuffers.upload(this._data.tileBufferData,this._dirtyMap),this._displayList=this._data.tileDisplayData.displayList.clone(),this._displayObjects=this._data.tileDisplayData.displayObjects.slice(),this._dirtyMap.markAllClean())))}clear(){this._data=null,this._displayList=null,this._dispRecStore=null,this._wglBuffers&&(this._wglBuffers.dispose(),this._wglBuffers=null)}_doPatchData(e){this._invalidated=!0,this._patchData(e)||(this._dirtyMap.markAllDirty(),this._data.reshuffle(),this._dispRecStore=J.fromTileData(this._data,this._dirtyMap)),this.requestRender()}_patchData(e){let t=!0;const s=e.addOrUpdate&&e.addOrUpdate.tileDisplayData&&e.addOrUpdate.tileDisplayData.displayObjects||[],i=(e.remove||[]).slice();for(const r of s)r.insertAfter!=null&&i.push(r.id);for(const r of i){const o=this._data.tileDisplayData.displayObjectRegistry.get(r);if(o){this._data.tileDisplayData.displayList.removeFromList(o.displayRecords);for(const h of o.displayRecords)this._dispRecStore.delete(h);this._data.tileDisplayData.displayObjectRegistry.delete(r);const n=this._data.tileDisplayData.displayObjects.indexOf(o);this._data.tileDisplayData.displayObjects.splice(n,1)}}for(const r of s){let o,n=this._data.tileDisplayData.displayObjectRegistry.get(r.id);if(n){const d=n.displayRecords;n.set(r),n.displayRecords=d;const l=n.displayRecords.length;for(let c=0;c<l;++c){const u=n.displayRecords[c],f=r.displayRecords[c];(c>=r.displayRecords.length||u.geometryType!==f.geometryType||u.symbolLevel!==f.symbolLevel||u.zOrder!==f.zOrder||u.materialKey!==f.materialKey)&&(this._dispRecStore.delete(n.displayRecords[c]),c<r.displayRecords.length&&(n.displayRecords[c]=void 0))}n.displayRecords.length=r.displayRecords.length}else{let d;n=r.copy(),n.displayRecords=[],this._data.tileDisplayData.displayObjectRegistry.set(r.id,n);const l=this._data.tileDisplayData.displayObjects;if(n.insertAfter!=null)if(o={},n.insertAfter>=0){const c=this._data.tileDisplayData.displayObjectRegistry.get(n.insertAfter);c?(d=l.indexOf(c)+1,d<l.length?l.splice(d,0,n):(l.push(n),d=l.length)):(l.push(n),d=l.length)}else l.unshift(n),d=0;else l.push(n),d=l.length;if(o){const c=r.displayRecords.length>0?1:0;let u=0;for(let f=d-1;f>=0&&u<c;--f)for(let p=l[f].displayRecords.length-1;p>=0&&u<c;--p){const g=l[f].displayRecords[p],_=this._data.tileDisplayData.displayList.getDPInfoType();o[_]||(o[_]=g,++u)}}}const h=r.displayRecords.length;for(let d=0;d<h;++d){const l=r.displayRecords[d];let c=n.displayRecords[d];c?(c.meshData=l.meshData,c.materialKey=l.materialKey):(c=l.copy(),c.vertexFrom=void 0,c.indexFrom=void 0,n.displayRecords[d]=c);const u=l.geometryType,f=this._data.tileDisplayData.displayList.getDPInfoType(),p=e.addOrUpdate.tileBufferData.geometries[u],g=p.vertexBuffer,_=p.indexBuffer;let y;o&&(y=o[f]?this._data.tileDisplayData.displayList.splitAfter(o[f]):-1),t=this._dispRecStore.setMeshData(c,l,g,_,y)&&t,o&&c.indexFrom!=null&&c.indexFrom!=null&&(o[f]=c)}}return t}}class Ue{constructor(){this._byGeometryType=null}get satisfied(){return!this._byGeometryType}reset(){this._byGeometryType=null}verticesFor(e){return this._byGeometryType?this._byGeometryType[e].vertices:0}indicesFor(e){return this._byGeometryType?this._byGeometryType[e].indices:0}needMore(e,t,s){if(!t&&!s)return;this._byGeometryType||(this._byGeometryType=[{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0}]);const i=this._byGeometryType[e];i.vertices+=t,i.indices+=s}}const fe=5;class S{constructor(){this.geometries=[{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}}]}clone(){const e=new S;for(let t=0;t<this.geometries.length;t++){const s=this.geometries[t],i=e.geometries[t];i.indexBuffer=s.indexBuffer.slice(),i.vertexBuffer={};for(const r in s.vertexBuffer){const{data:o,stride:n}=s.vertexBuffer[r];i.vertexBuffer[r]={data:o.slice(),stride:n}}}return e}static deserialize(e){const t=new S;for(let s=0;s<fe;++s){t.geometries[s].indexBuffer=new Uint32Array(e.geometries[s].indexBuffer),t.geometries[s].vertexBuffer={};for(const i in e.geometries[s].vertexBuffer)t.geometries[s].vertexBuffer[i]={data:Q(e.geometries[s].vertexBuffer[i].data,e.geometries[s].vertexBuffer[i].stride),stride:e.geometries[s].vertexBuffer[i].stride}}return t}serialize(){const e={geometries:[{indexBuffer:this.geometries[0].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[1].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[2].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[3].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[4].indexBuffer.buffer,vertexBuffer:{}}]};for(let t=0;t<fe;++t)for(const s in this.geometries[t].vertexBuffer)e.geometries[t].vertexBuffer[s]={data:this.geometries[t].vertexBuffer[s].data.buffer,stride:this.geometries[t].vertexBuffer[s].stride};return e}getBuffers(){const e=[];for(let t=0;t<fe;++t){e.push(this.geometries[t].indexBuffer.buffer);for(const s in this.geometries[t].vertexBuffer)e.push(this.geometries[t].vertexBuffer[s].data.buffer)}return e}}function ee(a,e,t,...s){e<a.length?a.splice(e,t,...s):a.push(...s)}const pe=new Map;pe.set(ue.MAP,[R.FILL,R.LINE,R.MARKER,R.TEXT]),pe.set(ue.LABEL,[R.LABEL]),pe.set(ue.LABEL_ALPHA,[R.LABEL]);class me{constructor(){this.symbolLevels=[]}replay(e,t,s){for(const i of this.symbolLevels)for(const r of i.zLevels){const o=r.geometryDPInfo.unified;if(o)for(const n of o){const h=e.painter.getGeometryBrush(n.geometryType),d=t.getGeometry(n.geometryType),l={geometryType:n.geometryType,materialKey:n.materialKey,indexFrom:n.indexFrom,indexCount:n.indexCount,draw:(c,u,f)=>{d.draw(c,u,f,n.indexFrom,n.indexCount)}};h.prepareState(e,t),h.drawGeometry(e,t,l,s)}}}get empty(){return!this.symbolLevels||this.symbolLevels.length===0}clear(){this.symbolLevels.length=0}addToList(e,t){if(Array.isArray(e))for(const s of e)this._addToList(s,t);else this._addToList(e,t)}removeFromList(e){Array.isArray(e)||(e=[e]);let t=null;for(const s of e)t=this._removeFromList(s);return t}clone(){const e=new me;for(const t of this.symbolLevels)e.symbolLevels.push(t.clone());return e}splitAfter(e){const t=this._getDisplayList(e.symbolLevel,e.zOrder),s=t.length,i=e.indexFrom+e.indexCount;for(let r=0;r<s;++r){const o=t[r];if(o.geometryType===e.geometryType&&i>o.indexFrom&&i<=o.indexFrom+o.indexCount){if(i<o.indexFrom+o.indexCount){const n=new V;n.geometryType=o.geometryType,n.materialKey=o.materialKey,n.indexFrom=i,n.indexCount=o.indexFrom+o.indexCount-i,t.splice(r+1,0,n),o.indexCount=i-o.indexFrom}return r}}}_addToList(e,t){const s=e.symbolLevel,i=e.zOrder,r=this._getDisplayList(s,i),o=t!=null?t:r.length-1,n=o>=0&&o<r.length?r[o]:null;if(n!==null&&n.materialKey===e.materialKey&&n.indexFrom+n.indexCount===e.indexFrom&&n.geometryType===e.geometryType)n.indexCount+=e.indexCount;else{const h=new V;h.indexFrom=e.indexFrom,h.indexCount=e.indexCount,h.materialKey=e.materialKey,h.geometryType=e.geometryType,ee(r,o+1,0,h)}}_removeFromList(e){const t=e.symbolLevel,s=e.zOrder,i=this._getDisplayList(t,s),r=i.length;let o;for(let n=0;n<r;++n){const h=i[n];if(e.indexFrom+e.indexCount>h.indexFrom&&e.indexFrom<h.indexFrom+h.indexCount&&h.geometryType===e.geometryType){o=n;break}}if(o!==void 0){const n=i[o];if(e.indexFrom===n.indexFrom)return n.indexCount-=e.indexCount,n.indexFrom+=e.indexCount,n.indexCount===0&&ee(i,o,1),o-1;if(e.indexFrom+e.indexCount===n.indexFrom+n.indexCount)return n.indexCount-=e.indexCount,n.indexCount===0?(ee(i,o,1),o-1):o;{const h=n.indexFrom,d=e.indexFrom-n.indexFrom,l=e.indexCount,c=n.indexFrom+n.indexCount-(e.indexFrom+e.indexCount);n.indexCount=d;const u=new V;return u.geometryType=n.geometryType,u.materialKey=n.materialKey,u.indexFrom=h+d+l,u.indexCount=c,ee(i,o+1,0,u),o}}return null}_getDisplayList(e,t){let s;const i=this.symbolLevels.length;for(let n=0;n<i;n++)if(this.symbolLevels[n].symbolLevel===e){s=this.symbolLevels[n];break}let r;s||(s=new ye,s.symbolLevel=e,this.symbolLevels.push(s));const o=s.zLevels.length;for(let n=0;n<o;n++)if(s.zLevels[n].zLevel===t){r=s.zLevels[n];break}return r||(r=new ge,r.geometryDPInfo=new te,r.zLevel=t,s.zLevels.push(r)),r.geometryDPInfo.unified||(r.geometryDPInfo.unified=[]),r.geometryDPInfo.unified}getDPInfoType(){return"unified"}}class V{constructor(){this.materialKey=null,this.indexFrom=0,this.indexCount=0}clone(){const e=new V;return e.geometryType=this.geometryType,e.materialKey=this.materialKey,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e}}class te{constructor(){this.fill=null,this.line=null,this.marker=null,this.text=null,this.label=null,this.unified=null}clone(){const e=new te;return e.fill=this.fill&&this.fill.map(t=>t.clone()),e.line=this.line&&this.line.map(t=>t.clone()),e.marker=this.marker&&this.marker.map(t=>t.clone()),e.text=this.text&&this.text.map(t=>t.clone()),e.label=this.label&&this.label.map(t=>t.clone()),e.unified=this.unified&&this.unified.map(t=>t.clone()),e}}class ge{constructor(){this.geometryDPInfo=new te}clone(){const e=new ge;return e.zLevel=this.zLevel,e.geometryDPInfo=this.geometryDPInfo.clone(),e}}class ye{constructor(){this.zLevels=[]}clone(){const e=new ye;e.symbolLevel=this.symbolLevel;for(const t of this.zLevels)e.zLevels.push(t.clone());return e}}class je{constructor(){this.vertexData=new Map,this.vertexCount=0,this.indexData=[]}clear(){this.vertexData.clear(),this.vertexCount=0,this.indexData=[]}update(e,t,s){for(const i in e)this.vertexData.set(i,e[i]);for(const i in this.vertexData)e[i]===null&&this.vertexData.delete(i);this.vertexCount=t,this.indexData=s}}class L{constructor(e,t,s,i=0,r=0){this.id=e,this.geometryType=t,this.materialKey=s,this.minZoom=i,this.maxZoom=r,this.meshData=null,this.symbolLevel=0,this.zOrder=0,this.vertexFrom=0,this.vertexCount=0,this.indexFrom=0,this.indexCount=0}get sortKey(){return this._sortKey===void 0&&this._computeSortKey(),this._sortKey}clone(){return this.copy()}copy(){const e=new L(this.id,this.geometryType,this.materialKey);return e.vertexFrom=this.vertexFrom,e.vertexCount=this.vertexCount,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e.zOrder=this.zOrder,e.symbolLevel=this.symbolLevel,e.meshData=this.meshData,e.minZoom=this.minZoom,e.maxZoom=this.maxZoom,e}setMeshDataFromBuffers(e,t,s){const i=new je;for(const r in t){const o=t[r].stride,n=t[r].data,h=[],d=Y(o);for(let l=0;l<o*e.vertexCount/d;++l)h[l]=n[l+o*e.vertexFrom/d];i.vertexData.set(r,h)}i.indexData.length=0;for(let r=0;r<e.indexCount;++r)i.indexData[r]=s[r+e.indexFrom]-e.vertexFrom;i.vertexCount=e.vertexCount,this.meshData=i}readMeshDataFromBuffers(e,t){this.meshData?this.meshData.clear():this.meshData=new je;for(const s in e){const i=e[s].stride,r=e[s].data,o=[],n=Y(i);for(let h=0;h<i*this.vertexCount/n;++h)o[h]=r[h+i*this.vertexFrom/n];this.meshData.vertexData.set(s,o)}this.meshData.indexData.length=0;for(let s=0;s<this.indexCount;++s)this.meshData.indexData[s]=t[s+this.indexFrom]-this.vertexFrom;this.meshData.vertexCount=this.vertexCount}writeMeshDataToBuffers(e,t,s,i){for(const r in t){const o=t[r].stride,n=this.meshData.vertexData.get(r),h=t[r].data,d=Y(o);for(let l=0;l<o*this.meshData.vertexCount/d;++l)h[l+o*e/d]=n[l]}for(let r=0;r<this.meshData.indexData.length;++r)i[r+s]=this.meshData.indexData[r]+e;this.vertexFrom=e,this.vertexCount=this.meshData.vertexCount,this.indexFrom=s,this.indexCount=this.meshData.indexData.length}static writeAllMeshDataToBuffers(e,t,s){let i=0,r=0;for(const o of e)o.writeMeshDataToBuffers(i,t,r,s),i+=o.vertexCount,r+=o.indexCount}_computeSortKey(){this._sortKey=(31&this.symbolLevel)<<12|(127&this.zOrder)<<4|7&this.geometryType}serialize(e){return e.push(this.geometryType),e.push(this.materialKey),e.push(this.vertexFrom),e.push(this.vertexCount),e.push(this.indexFrom),e.push(this.indexCount),e.push(this.minZoom),e.push(this.maxZoom),e}static deserialize(e,t){const s=e.readInt32(),i=e.readInt32(),r=new L(t.id,s,i);return r.vertexFrom=e.readInt32(),r.vertexCount=e.readInt32(),r.indexFrom=e.readInt32(),r.indexCount=e.readInt32(),r.minZoom=e.readInt32(),r.maxZoom=e.readInt32(),r}}function Ve(a,e){if(e!==null){a.push(e.length);for(const t of e)t.serialize(a);return a}a.push(0)}function ns(a,e,t){const s=a.readInt32(),i=new Array(s);for(let r=0;r<i.length;r++)i[r]=e.deserialize(a,t);return i}class z{constructor(e){this.insertAfter=null,this.id=e,this.displayRecords=[]}copy(){const e=new z(this.id);return e.set(this),e}clone(){const e=new z(this.id);return e.displayRecords=this.displayRecords.map(t=>t.clone()),e.insertAfter=this.insertAfter,e}set(e){this.id=e.id,this.displayRecords=e.displayRecords,this.insertAfter=e.insertAfter}serialize(e){return e.push(this.id),Ve(e,this.displayRecords),e}static deserialize(e){const t=e.readInt32(),s=new z(t),i={id:t};return s.displayRecords=ns(e,L,i),s}}function as(a){const e=[[],[],[],[],[]],t=a;for(const s of t)for(const i of s.displayRecords)e[i.geometryType].push(i);return e}class P{constructor(){}get displayObjectRegistry(){if(!this._displayObjectRegistry){this._displayObjectRegistry=new Map;for(const e of this.displayObjects)this._displayObjectRegistry.set(e.id,e)}return this._displayObjectRegistry}get displayList(){return this._displayList}computeDisplayList(){this._displayList=new me;for(const e of this.displayObjects)for(const t of e.displayRecords)this._displayList.addToList(t)}clone(){const e=new P;return this.displayObjects&&(e.displayObjects=this.displayObjects.map(t=>t.clone())),e}serialize(e){return Ve(e,this.displayObjects),e}_deserializeObjects(e){const t=e.readInt32(),s=new Array(t),i=new Map;for(let r=0;r<s.length;++r){const o=z.deserialize(e);s[r]=o,i.set(o.id,o)}this.displayObjects=s,this._displayList=null,this._displayObjectRegistry=i}static deserialize(e){const t=new P;return t._deserializeObjects(e),t}}class A{constructor(e,t){this.data=e,this.stride=t}static decode(e){const t=Q(e.data,e.stride),s=e.stride;return new A(t,s)}static fromVertexVector(e){const t=Q(e.data.buffer(),e.stride),s=e.stride;return new A(t,s)}}class G{constructor(e,t,s){this.geometryType=e,this.indexBuffer=new Uint32Array(t),this.namedBuffers=s}static decode(e){const t=e.geometryType,s=e.indexBuffer,i={};for(const r in e.namedBuffers)i[r]=A.decode(e.namedBuffers[r]);return new G(t,s,i)}static fromVertexData(e,t){const s=e.indices,i=Q(e.vertices,e.stride),r=e.stride,o={geometry:new A(i,r)};return new G(t,s,o)}static fromVertexVectors(e){const t=e.geometryType,s=e.indexVector.buffer(),i={};for(const r in e.namedVectors)i[r]=A.fromVertexVector(e.namedVectors[r]);return new G(t,s,i)}}class ls{constructor(e,t){this.data=e,this.stride=t}get vertexCount(){const e=this.stride/4,t=this.data.length/e;return t!==(0|t)&&console.debug("Corrupted stride"),t}transfer(e,t){const s=this.data.buffer();e.vertexCount=this.vertexCount,e.data=s,e.stride=this.stride,t.push(s)}}class hs{constructor(e,t,s){this.geometryType=e,this.indexVector=new W(Uint32Array,6*t),this.namedVectors={};const i=Ot(e,s);for(const r in i){const o=i[r];let n;switch(o%4){case 0:case 2:n=new W(Uint32Array,o*t);break;case 1:case 3:n=new W(Uint8Array,o*t)}this.namedVectors[r]=new ls(n,o)}}get(e){return this.namedVectors[e].data}getVector(e){return this.namedVectors[e]}transfer(e,t){const s=this.indexVector.buffer(),i={};t.push(s);for(const r in this.namedVectors){const o=this.namedVectors[r];i[r]={},o.transfer(i[r],t)}e.geometryType=this.geometryType,e.indexBuffer=s,e.namedBuffers=i,this.destroy()}intoBuffers(){const e=G.fromVertexVectors(this);return this.destroy(),e}destroy(){this.indexVector=null,this.namedVectors=null}}const se=new Ue,O=new Ue,Pe=1.5,ds=5;function cs(a,e){const t={};for(const s in a){const i={data:de(e,a[s]),stride:a[s]};t[s]=i}return t}function us(a){return[a.fill||{},a.line||{},a.icon||{},a.text||{},a.label||{}]}class b{constructor(){this.tileDisplayData=null,this.tileBufferData=null}reshuffle(){se.reset();const e=as(this.tileDisplayData.displayObjects);for(const i of e)for(const r of i)r&&se.needMore(r.geometryType,r.meshData?r.meshData.vertexCount:r.vertexCount,r.meshData?r.meshData.indexData.length:r.indexCount);const t=e.length,s=new S;for(let i=0;i<t;++i){s.geometries[i].indexBuffer=new Uint32Array(Math.round(Pe*se.indicesFor(i)));const r=[];for(const d in this.tileBufferData.geometries[i].vertexBuffer)r.push(this.tileBufferData.geometries[i].vertexBuffer[d].stride);const o=b._computeVertexAlignment(r),n=Math.round(Pe*se.verticesFor(i)),h=b._align(n,o);for(const d in this.tileBufferData.geometries[i].vertexBuffer){const l=this.tileBufferData.geometries[i].vertexBuffer[d].stride;s.geometries[i].vertexBuffer[d]={stride:l,data:de(h,l)}}}O.reset(),this.tileDisplayData.displayList.clear();for(let i=0;i<t;++i){const r=e[i];for(const o of r){if(o.meshData)o.writeMeshDataToBuffers(O.verticesFor(i),s.geometries[i].vertexBuffer,O.indicesFor(i),s.geometries[i].indexBuffer),o.meshData=null;else{const n=this.tileBufferData.geometries[i].vertexBuffer,h=this.tileBufferData.geometries[i].indexBuffer,d=s.geometries[i].vertexBuffer,l=s.geometries[i].indexBuffer,c=O.verticesFor(i),u=O.indicesFor(i);ce(c,u,d,l,o,n,h),o.vertexFrom=c,o.indexFrom=u}O.needMore(i,o.vertexCount,o.indexCount)}}for(const i of this.tileDisplayData.displayObjects)this.tileDisplayData.displayList.addToList(i.displayRecords);this.tileBufferData=s}getStrides(){const e=[];for(let t=0;t<this.tileBufferData.geometries.length;++t){const s=this.tileBufferData.geometries[t];e[t]={};for(const i in s.vertexBuffer)e[t][i]=s.vertexBuffer[i].stride}return e}clone(){const e=new b;return e.tileBufferData=this.tileBufferData.clone(),e.tileDisplayData=this.tileDisplayData.clone(),e}_guessSize(){const{displayObjects:e}=this.tileDisplayData,t=Math.min(e.length,4),s=12,i=40;let r=0;for(let o=0;o<t;o++)r=Math.max(r,e[o].displayRecords.length);return 2*(e.length*s+e.length*r*i)}serialize(){const e=this.tileBufferData.serialize(),t=this.tileBufferData.getBuffers(),s=this.tileDisplayData.serialize(new W(Int32Array,this._guessSize())).buffer();return t.push(s),{result:{displayData:s,bufferData:e},transferList:t}}static fromVertexData(e,t){const s={},i=new Map;for(const r of t)i.set(r.id,r);return $t(r=>{const o=e.data[r];if(w(o)){const n=Vt.from(o.records).getCursor();for(;n.next();){const h=n.id,d=n.materialKey,l=n.indexFrom,c=n.indexCount,u=n.vertexFrom,f=n.vertexCount,p=i.get(h),g=new L(h,r,d);g.indexFrom=l,g.indexCount=c,g.vertexFrom=u,g.vertexCount=f,p.displayRecords.push(g)}s[r]=G.fromVertexData(o,r)}else s[r]=new hs(r,0,{fill:"default"}).intoBuffers()}),b.fromMeshData({displayObjects:t,vertexBuffersMap:s})}static fromMeshData(e){const t=new b,s=new P,i=new S;s.displayObjects=e.displayObjects;for(const r in e.vertexBuffersMap){const o=e.vertexBuffersMap[r];i.geometries[r].indexBuffer=o.indexBuffer,i.geometries[r].vertexBuffer=o.namedBuffers}return t.tileDisplayData=s,t.tileBufferData=i,t}static bind(e,t){const s=new b;return s.tileDisplayData=e,s.tileBufferData=t,s}static create(e,t){const s=new b;s.tileDisplayData=new P,s.tileDisplayData.displayObjects=e;const i=[0,0,0,0,0],r=[0,0,0,0,0],o=[[],[],[],[],[]];for(const d of e)for(const l of d.displayRecords)o[l.geometryType].push(l),i[l.geometryType]+=l.meshData.vertexCount,r[l.geometryType]+=l.meshData.indexData.length;const n=new S,h=us(t);for(let d=0;d<ds;d++){const l=new Uint32Array(r[d]),c=cs(h[d],i[d]);L.writeAllMeshDataToBuffers(o[d],c,l),n.geometries[d]={indexBuffer:l,vertexBuffer:c}}return s.tileBufferData=n,s}static _align(e,t){const s=e%t;return s===0?e:e+(t-s)}static _computeVertexAlignment(e){let t=!1,s=!1;for(const i of e)i%4==2?t=!0:i%4!=0&&(s=!0);return s?4:t?2:1}}class ie extends Yt{constructor(e,t){super(e,t,null)}static from(e){const t=Jt.createInstance(),s=[],i=e.filter(r=>!!r.geometry);for(const r of i){const o=Ce(r.geometry);Xe(s,[r],o,!1,!1,"uid")}return new ie(t,s)}get geometryType(){const e=this._current;return e?e.geometryType:null}get insertAfter(){return this._current.insertAfter}readGraphic(){return this._current}getCursor(){return this.copy()}copy(){const e=new ie(this.instance,this._features);return this.copyInto(e),e}}const k=new Be,_e=new Be,ke="esriGeometryPolyline";function Ke(a){a.coords.length=0,a.lengths.length=0}class C{constructor(){this.bounds=T(),this.graphic=null}static acquire(e=null,t,s,i,r){let o;return C._pool.length===0?o=new C:(o=C._pool.pop(),this._set.delete(o)),o.acquire(e,t,s,i,r),o}static release(e){e&&!this._set.has(e)&&(e.release(),this._pool.push(e),this._set.add(e))}static getCentroidQuantized(e,t){if(q(e.geometry)){const s=e.symbol;if(U(s))return null;if(ze(s.type)||Ae(s.type)){const i=Ye(e.geometry);return Qe(t,{},{x:i[0],y:i[1]},!1,!1)}}return null}acquire(e=null,t,s,i,r){e&&this.set(e,t,s,i,r)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(e,t,s,i,r){this.graphic=e,this.geometry=s,this.symbolResource=t,this.bounds=i,r&&(this.size=r)}getGeometryQuantized(e,t,s,i){const r=this.geometry;if(q(r)){const o=r.rings;if(o.length===1&&o[0].length===2)return ae(e,{paths:[[o[0][0],o[0][1]]]})}else{if(le(r))return Ke(k),Ke(_e),We(k,r),Je(_e,k,r.hasZ,r.hasM,ke,e.scale[0]),et(k,_e,r.hasZ,r.hasM,ke,e),tt(k,r.hasZ,r.hasM);if(N(r)){const o=.5*i*Math.max(Math.abs(this.size[0])+this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]),[n,h]=we(s),d=h-n,l=r.points.filter(c=>{if(c[0]+o>h||c[0]-o<n){const u=[...c];return c[0]+o>h?u[0]-=d:u[0]+=d,he(t,c,o)||he(t,u,o)}return he(t,c,o)});return l.length===0?{points:l}:ae(e,{points:l})}}return ae(e,this.geometry)}}C._pool=[],C._set=new Set;const K={minX:0,minY:0,maxX:0,maxY:0},$=T(),Ee=1e-5;function re(a,e,t,s,i){return K.minX=e,K.minY=t,K.maxX=s,K.maxY=i,a.search(K)}function fs(a){return{minX:a.bounds[0],minY:a.bounds[1],maxX:a.bounds[2],maxY:a.bounds[3]}}class ps{constructor(e,t,s,i,r,o,n){this._graphics=i,this._onAdd=r,this._onRemove=o,this._hashToCIM=n,this._index=st(9,fs),this._itemByGraphic=new Map,this._inflatedSizeHelper=new Le,this._tileInfoView=e,this._uidFieldName=s;const h=e.getClosestInfoForScale(t);h&&(this._resolution=this._tileInfoView.getTileResolution(h.level))}setResourceManager(e){this._cimResourceManager=e,this._hittestDrawHelper=new Ft(e)}hitTest(e,t,s,i,r){e=Te(e,this._tileInfoView.spatialReference);const o=.5*i*window.devicePixelRatio*s;$[0]=e-o,$[1]=t-o,$[2]=e+o,$[3]=t+o;const n=.5*i*(s+D),h=re(this._index,e-n,t-n,e+n,t+n);if(!h||h.length===0)return[];const d=[],l=T(),c=T();for(const p of h){const{geometry:g,symbolResource:_}=p;this._getSymbolBounds(l,_,g,c,r),c[3]=c[2]=c[1]=c[0]=0,it(l,$)&&p.graphic.visible&&d.push(p)}if(d.length===0)return[];const u=this._hittestDrawHelper,f=[];for(const p of d){const{geometry:g,symbolResource:_}=p,{hash:y,textInfo:oe}=_,E=this._hashToCIM.get(y);E&&u.hitTest($,E.symbol,g,oe,r,i)&&f.push(p)}return f.sort(ms),f.map(p=>p.graphic)}getGraphicsData(e,t,s){const i=this._searchForItems(t);if(i.length===0||s.length===0)return[];i.sort((c,u)=>c.zorder-u.zorder),i[0].insertAfter=-1;for(let c=1;c<i.length;c++)i[c].insertAfter=i[c-1].graphic.uid;i.sort((c,u)=>c.graphic.uid-u.graphic.uid),s.sort((c,u)=>c.uid-u.uid);let r,o=0,n=0;const h=t.resolution,d=[],l={originPosition:"upperLeft",scale:[h,h],translate:[t.bounds[0],t.bounds[3]]};for(const c of s){for(n=-2;o<i.length;)if(r=i[o],o++,c.uid===r.graphic.uid){n=r.insertAfter;break}if(!r.geometry||n===-2)continue;const u=r.getGeometryQuantized(l,t.bounds,this._tileInfoView.spatialReference,h),f=ne({},r.graphic.attributes);f[this._uidFieldName]=c.uid,r.groupId==null&&(r.groupId=e.createTemplateGroup(r.symbol,null)),d.push({centroid:C.getCentroidQuantized(r,l),geometry:u,attributes:f,symbol:r.symbol,groupId:r.groupId,insertAfter:n,zorder:r.zorder})}return d.sort((c,u)=>c.zorder-u.zorder),d}queryTileData(e,t){if(this._graphics.length===0)return[];const{bounds:s,resolution:i}=t,r=this._searchForItems(t),o=[];return r.length===0||this._createTileGraphics(o,e,r,{originPosition:"upperLeft",scale:[i,i],translate:[s[0],s[3]]},t),o}has(e){return this._itemByGraphic.has(e)}getBounds(e){const t=this._itemByGraphic.get(e);return t?t.bounds:null}getAllBounds(){return Array.from(this._itemByGraphic.values()).filter(e=>e.graphic.visible).map(e=>e.bounds)}addOrModify(e,t,s){if(!e||U(t))return;this.has(e)&&this.remove(e),this._onAdd(e);const i=[0,0,0,0],r=this._getSymbolBounds(null,t,s,i,0),o=C.acquire(e,t,s,w(r)?r:null,i);return this._itemByGraphic.set(e,o),s&&this._index.insert(o),o.bounds}remove(e){if(!this._itemByGraphic.has(e))return;this._onRemove(e);const t=this._itemByGraphic.get(e);t.bounds&&this._index.remove(t),this._itemByGraphic.delete(e)}updateZ(){const e=this._graphics.items;let t,s;for(let i=0;i<e.length;i++)s=e[i],t=this._itemByGraphic.get(s),t&&(t.zorder=i)}update(e,t,s){const i=this._itemByGraphic.get(e);i.groupId=null;const r=rt(i.bounds);this._index.remove(i);const o=this._getSymbolBounds(i.bounds,t,s,i.size,0);return w(o)&&i.set(e,t,s,o,i.size),s&&this._index.insert(i),{oldBounds:r,newBounds:i.bounds}}updateLevel(e){if(this._resolution===e)return;this._resolution=e,this._index.clear();const t=this._itemByGraphic,s=[];for(const[i,r]of t){const o=this._getSymbolBounds(r.bounds,r.symbolResource,r.geometry,r.size,0);r.geometry&&w(o)&&(r.bounds=o,s.push(r))}this._index.load(s)}clear(){this._itemByGraphic.clear(),this._index.clear()}_createTileGraphics(e,t,s,i,r){const o=this._uidFieldName,n=this._tileInfoView.spatialReference,{bounds:h,resolution:d}=r;let l,c,u,f;s.sort((p,g)=>p.zorder-g.zorder);for(let p=0;p<s.length;p++){u=s[p],l=u.graphic,c=u.getGeometryQuantized(i,h,n,d),f=p===0?-1:s[p-1].graphic.uid;const g=ne({},u.graphic.attributes);g[o]=l.uid,u.groupId==null&&(u.groupId=t.createTemplateGroup(u.symbol,null)),e.push({centroid:C.getCentroidQuantized(u,i),geometry:c,attributes:g,symbol:u.symbol,groupId:u.groupId,insertAfter:f,zorder:u.zorder})}}_searchForItems(e){const t=this._tileInfoView.spatialReference,s=e.bounds;if(t.isWrappable){const[i,r]=we(t),o=Math.abs(s[2]-r)<Ee,n=Math.abs(s[0]-i)<Ee;if((!o||!n)&&(o||n)){const h=e.resolution;let d;d=T(o?[i,s[1],i+h*D,s[3]]:[r-h*D,s[1],r,s[3]]);const l=re(this._index,s[0],s[1],s[2],s[3]),c=re(this._index,d[0],d[1],d[2],d[3]);return[...new Set([...l,...c])]}}return re(this._index,s[0],s[1],s[2],s[3])}_getSymbolBounds(e,t,s,i,r){if(!t||!t.symbol||!s)return null;if(e||(e=T()),ot(e,s),!i||i[0]===0&&i[1]===0&&i[2]===0&&i[3]===0){const{hash:h,textInfo:d}=t,l=this._hashToCIM.get(h);if(!l)return null;i||(i=[0,0,0,0]);const c=this._inflatedSizeHelper.getSymbolInflateSize(i,l.symbol,this._cimResourceManager,r,d);i[0]=Z(c[0]),i[1]=Z(c[1]),i[2]=Z(c[2]),i[3]=Z(c[3])}const o=this._resolution,n=Le.SafeSize(i);return e[0]-=n*o,e[1]-=n*o,e[2]+=n*o,e[3]+=n*o,e}}const ms=(a,e)=>{const t=Ge(a.graphic),s=Ge(e.graphic);return t===s?e.zorder-a.zorder:t-s},gs=nt("esri-2d-graphic-debug");function xe(a,e,t){if(t.has(a))return t.get(a);const s={tile:e,addedOrModified:[],removed:[]};return t.set(a,s),s}let B=class extends ts(at(lt)){constructor(a){super(a),this._storage=new Qt,this._displayIds=new Map,this._controller=new AbortController,this._tiles=new Map,this._graphicStoreUpdate=!1,this._graphicsSet=new Set,this._matcher=Promise.resolve(null),this._tileUpdateSet=new Set,this._tilesToUpdate=new Map,this._graphicIdToAbortController=new Map,this._attached=!1,this._highlightIds=new Map,this._updatingGraphicsTimer=null,this._hashToExpandedSymbol=new Map,this._hashToExpandedSymbolPromise=new Map,this._hashToCIMSymbolPromise=new Map,this._hashToCIM=new Map,this._processing=!1,this._needsProcessing=!1,this._pendingUpdate={added:new Set,updated:new Set,removed:new Set},this.lastUpdateId=-1,this.updateRequested=!1,this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}_createMatcher(a,e,t){if(a){const s=qt({indexCount:0,fields:{}},"feature",a);this._matcher=kt(s,e,null,t)}}_createDisplayId(a){return this._displayIds.has(a)||this._displayIds.set(a,this._storage.createDisplayId()),this._displayIds.get(a)}initialize(){this._attributeStore=new Wt({type:"local",initialize:i=>Promise.resolve(this.container.attributeView.initialize(i)),update:i=>this.container.attributeView.requestUpdate(i),render:()=>this.container.requestRender()},ht()),this.container.hasHighlight=()=>!!this._highlightIds.size;const a=i=>{this._createDisplayId(i.uid),this._setFilterState(i.uid,i.visible)},e=i=>{const r=this._displayIds.get(i.uid);this._displayIds.delete(i.uid),this._storage.releaseDisplayId(r)},t=new Kt(this.container.getMaterialItems.bind(this.container),this.view.featuresTilingScheme.tileInfo);this._graphicStore=new ps(this.view.featuresTilingScheme,this.view.state.scale,this.uid,this.graphics,a,e,this._hashToCIM),this._meshFactory=new Et(null,this.uid,t),this._templateStore=t,this.handles.add([this.watch("renderer",i=>{this._createMatcher(i,t,this.container.stage.resourceManager);for(const r of this.graphics)this._pendingUpdate.updated.add(r);this.requestUpdate()}),this.view.graphicsTileStore.on("update",i=>this._onTileUpdate(i)),this.container.on("attach",()=>{gs&&this.container.enableRenderingBounds(()=>this._graphicStore.getAllBounds()),this.graphics.items.length>0&&this._graphicsChangeHandler({target:this.graphics,added:this.graphics.items,removed:[],moved:[]}),this.handles.add(this.graphics.on("change",r=>this._graphicsChangeHandler(r)),"graphics");const i=this.container.stage.resourceManager;this._createMatcher(this.renderer,t,i),this._graphicStore.setResourceManager(i),this._attached=!0,this.notifyChange("updating")})]);const s=this.view.graphicsTileStore.tiles;this._onTileUpdate({added:s,removed:[]})}destroy(){this._updatingGraphicsTimer&&(clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=null,this.notifyChange("updating")),this._controller.abort(),this.container.destroy(),this._set("graphics",null),this._graphicStore.clear(),this._attributeStore=null,this._hashToExpandedSymbol.clear(),this.view=null,this.renderer=null,this._hashToCIM.clear(),this._hashToCIMSymbolPromise.clear(),this._hashToExpandedSymbolPromise.clear()}get updating(){return!this._attached||this._updatingGraphicsTimer!==null||this._tileUpdateSet.size>0||this._tilesToUpdate.size>0}hitTest(a){if(!this.view||!this.view.position)return null;const{resolution:e,rotation:t}=this.view.state;return this._graphicStore.hitTest(a.x,a.y,2,e,t)}update(a){x(this._controller.signal);const e=a.state,{resolution:t}=e;if(this._graphicStore.updateLevel(t),this._graphicStoreUpdate=!0,this.updateRequested=!1,this._pendingUpdate.updated.size>0){if(!this._processing)return void this._updateGraphics();this._needsProcessing=!0}}viewChange(){this.requestUpdate()}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback())}processUpdate(a){this.updateRequested&&(this.updateRequested=!1,this.update(a))}graphicUpdateHandler(a){const{graphic:e,property:t,newValue:s}=a;switch(t){case"attributes":break;case"geometry":case"symbol":this._pendingUpdate.updated.add(e),this.requestUpdate();break;case"visible":this._setFilterState(e.uid,s),this._attributeStore.sendUpdates()}}addHighlight(a){for(const e of a)if(this._highlightIds.has(e)){const t=this._highlightIds.get(e);this._highlightIds.set(e,t+1)}else this._highlightIds.set(e,1);this._updateHighlight()}removeHighlight(a){for(const e of a)if(this._highlightIds.has(e)){const t=this._highlightIds.get(e)-1;t===0?this._highlightIds.delete(e):this._highlightIds.set(e,t)}this._updateHighlight()}_updateHighlight(){const a=Array.from(this._highlightIds.keys()),e=a.map(t=>this._displayIds.get(t));this._attributeStore.setHighlight(a,e)}_getIntersectingTiles(a){const e=this._graphicStore.getBounds(a);if(!e||dt(e)===0||ct(e)===0)return[];const t=Nt(e,this.view.spatialReference);return w(t)?[...new Set([...this.view.graphicsTileStore.boundsIntersections(t[0]),...this.view.graphicsTileStore.boundsIntersections(t[1])])]:this.view.graphicsTileStore.boundsIntersections(e)}async _updateTile(a){x(this._controller.signal);const e=a.tile,t=this._getGraphicsData(this._templateStore,e,a.addedOrModified),s=await this._processGraphics(e,t);return x(this._controller.signal),this._patchTile(e.key,{type:"update",addOrUpdate:s,remove:a.removed,end:!0,clear:!1,sort:!1}),s}_patchTile(a,e){if(!this._tiles.has(a))return;const t=this._tiles.get(a);this.container.onTileData(t,e),this.container.requestRender()}_graphicsChangeHandler(a){const e=this._pendingUpdate;for(const t of a.added)e.added.add(t);for(const t of a.moved)e.updated.add(t);for(const t of a.removed)this._pendingUpdate.added.has(t)?e.added.delete(t):e.removed.add(t);this._processing?this._needsProcessing=!0:this._updateGraphics()}_getGraphicsToUpdate(){const a={added:[],removed:[],updated:[]};if(!this.graphics)return a;const e=this._pendingUpdate;for(const t of this.graphics.items)e.added.has(t)?a.added.push(t):e.updated.has(t)&&a.updated.push(t);for(const t of e.removed)this._graphicStore.has(t)&&a.removed.push(t);return e.added.clear(),e.removed.clear(),e.updated.clear(),a}async _updateGraphics(){this._processing=!0;const{added:a,removed:e,updated:t}=this._getGraphicsToUpdate(),s=this._tilesToUpdate;let i;try{if(!this._graphicStoreUpdate){const l=this.view.state,{resolution:c}=l;this._graphicStore.updateLevel(c)}const r=[],o=new Array(a.length+e.length);for(let l=0;l<t.length;l++){const c=t[l],u=this._getIntersectingTiles(c);for(const f of u)i=f.id,xe(i,f,s).removed.push(this._displayIds.get(c.uid));r.push(this._updateGraphic(c,null)),o[l]=c}const n=t.length;for(let l=0;l<a.length;l++){const c=a[l];o[n+l]=c,this._graphicsSet.add(c),r.push(this._addGraphic(c))}for(const l of e){this._abortProcessingGraphic(l.uid);const c=this._getIntersectingTiles(l);for(const u of c)i=u.id,xe(i,u,s).removed.push(this._displayIds.get(l.uid));this._graphicsSet.delete(l),this._graphicStore.remove(l)}let h;this._flipUpdatingGraphics(),await Promise.all(r);for(let l=0;l<o.length;l++){h=o[l];const c=this._getIntersectingTiles(h);for(const u of c)i=u.id,xe(i,u,s).addedOrModified.push(h)}this._graphicStore.updateZ();const d=[];for(const[l,c]of s)d.push(this._updateTile(c));await Promise.all(d)}catch(r){X(r)}for(const r of e)try{const o=await this._getSymbolForGraphic(r,{});if(o){const n=o.hash();this._hashToExpandedSymbol.delete(n)}}catch(o){X(o)}s.clear(),this.notifyChange("updating"),this._processing=!1,this._needsProcessing&&(this._needsProcessing=!1,this._updateGraphics())}_getArcadeInfo(a){const e=(a.attributes?Object.keys(a.attributes):[]).map(t=>({name:t,alias:t,type:typeof a.attributes[t]=="string"?"esriFieldTypeString":"esriFieldTypeDouble"}));return U(a.geometry)?null:{geometryType:Ce(a.geometry),spatialReference:ut.fromJSON(a.geometry.spatialReference),fields:e}}_getSymbolForGraphic(a,e){return x(this._controller.signal),w(a.symbol)?Promise.resolve(a.symbol):w(this.renderer)?this.renderer.getSymbolAsync(a,{scale:this.view.scale,abortOptions:e}):Promise.resolve(this._getNullSymbol(a))}_getCIMSymbol(a,e,t){let s=this._hashToCIM.get(e);if(s)return Promise.resolve(s);const i=It(a);if(w(i)){if(i.type==="CIMSymbolReference")return s=i,this._hashToCIM.set(e,s),Promise.resolve(s);let r=this._hashToCIMSymbolPromise.get(e);return r||(r=i.fetchCIMSymbol(t).then(o=>(this._hashToCIM.set(e,o.data),this._hashToCIMSymbolPromise.delete(e),o)).catch(o=>(this._hashToCIMSymbolPromise.delete(e),Fe(o),null)),this._hashToCIMSymbolPromise.set(e,r),r)}return Promise.resolve(null)}_expandCIMSymbol(a,e,t,s){const i=this._hashToExpandedSymbol.get(t);if(i)return Promise.resolve(i);let r=this._hashToExpandedSymbolPromise.get(t);if(r)return r;const o=this.container.stage,n=this._getArcadeInfo(e),h=Zt(a);return r=es(h,n,o.resourceManager,s),this._hashToExpandedSymbolPromise.set(t,r),r.then(d=>(this._hashToExpandedSymbol.set(t,d),this._hashToExpandedSymbolPromise.delete(t),d)),r}async _getSymbolResources(a,e){return x(this._controller.signal),this.container.stage?this._getSymbolForGraphic(a,e).then(t=>{const s=t.hash();return this._getCIMSymbol(t,s,e).then(i=>U(i)?null:this._expandCIMSymbol(i,a,s,e).then(r=>{const o=r.layers.filter(n=>n.type==="text"&&typeof n.text=="string");if(o&&o.length>0){const n=new Array(o.length);for(let d=0;d<o.length;d++){const l=o[d],c=[],[u]=Rt(l.text);for(let f=0;f<u.length;f++)c.push(u.charCodeAt(f));n[d]={symbol:l,id:d,glyphIds:c}}const h=new Map;return this.container.getMaterialItems(n).then(d=>{for(let l=0;l<o.length;l++){const c=o[l];h.set(c.cim,{text:c.text,mosaicItem:d[l].mosaicItem})}return{symbol:r,textInfo:h,hash:s}})}return{symbol:r,hash:s}}))}).catch(t=>(Fe(t),null)):null}async _projectAndNormalizeGeometry(a,e){if(x(this._controller.signal),U(a.geometry)||a.geometry.type==="mesh")return null;let t=a.geometry;if(q(t)){const r=t.rings;t.rings=r}else if(le(t)){const r=t.paths;t.paths=r}else if(Ie(t)){const r=await this._getSymbolForGraphic(a,e);x(this._controller.signal),ze(r.type)||Ae(r.type)?t=t.center:t=Xt(t)}await St(t.spatialReference,this.view.spatialReference);const s=Mt(t),i=Lt(s,t.spatialReference,this.view.spatialReference);return ft(i),i}_onTileUpdate(a){const e=Re(this.view.spatialReference);if(a.added&&a.added.length>0)for(const t of a.added)this._addNewTile(t,e);if(a.removed&&a.removed.length>0)for(const t of a.removed)this._removeTile(t.key)}async _addGraphic(a){this._abortProcessingGraphic(a.uid),x(this._controller.signal);const e=new AbortController;this._graphicIdToAbortController.set(a.uid,e);const t={signal:e.signal};try{await this._addOrUpdateGraphic(a,t),x(this._controller.signal),this._graphicIdToAbortController.delete(a.uid)}catch(s){if(this._graphicIdToAbortController.delete(a.uid),!X(s))throw s}}_updateGraphic(a,e){x(this._controller.signal);const t=this._projectAndNormalizeGeometry(a,e),s=this._getSymbolResources(a,e);return Promise.all([t,s]).then(([i,r])=>{x(this._controller.signal),this._graphicStore.addOrModify(a,r,i)})}_addOrUpdateGraphic(a,e){x(this._controller.signal);const t=this._projectAndNormalizeGeometry(a,e),s=this._getSymbolResources(a,e);return Promise.all([t,s]).then(([i,r])=>{x(this._controller.signal),this._graphicsSet.has(a)&&this._graphicStore.addOrModify(a,r,i)})}_addTile(a){const e=this.view.featuresTilingScheme.getTileBounds(T(),a),t=new os(a,e[0],e[3]);return this._tiles.set(a,t),this.container.addChild(t),t}async _addNewTile(a,e){const t=this._addTile(a.key),s=this._graphicStore.queryTileData(this._templateStore,a);if(s.length===0)return;if(e){const r=Math.round((e.valid[1]-e.valid[0])/a.resolution);for(const o of s)o.geometry&&(Me(o.geometry)||N(o.geometry))&&this._wrapPoints(o,r)}const i=a.key;this._tileUpdateSet.add(a.key),this.notifyChange("updating");try{const r={type:"update",clear:!1,addOrUpdate:await this._processGraphics(a,s),remove:[],end:!0,sort:!1};t.patch(r),this._tileUpdateSet.delete(i),this.notifyChange("updating")}catch(r){if(this._tileUpdateSet.delete(i),this.notifyChange("updating"),!X(r))throw r}}_removeTile(a){if(!this._tiles.has(a))return;const e=this._tiles.get(a);this.container.removeChild(e),e.destroy(),this._tiles.delete(a)}_setFilterState(a,e){const t=this._displayIds.get(a),s=this._attributeStore.getHighlightFlag(a);this._attributeStore.setData(t,0,0,s|(e?zt:0))}_getGraphicsData(a,e,t){const s=this.view,i=Re(s.spatialReference),r=this._graphicStore.getGraphicsData(a,e,t);if(i){const o=Math.round((i.valid[1]-i.valid[0])/e.resolution);for(const n of r)n.geometry&&(Me(n.geometry)||N(n.geometry))&&this._wrapPoints(n,o)}return r}_wrapPoints(a,e){const t=a.geometry;N(t)?this._wrapMultipoint(t,e):this._wrapPoint(a,e)}_wrapMultipoint(a,e){const t=a.points,s=[];let i=0,r=0;for(const[o,n]of t){if(s.push([o+i,n]),i=0,e===M){const h=5*D;o+r<h?(s.push([e,0]),i=-e):o+r>M-h&&(s.push([-e,0]),i=e)}else o+r<-D?(s.push([e,0]),i=-e):o+r>M+D&&(s.push([-e,0]),i=e);r+=o}a.points=s}_wrapPoint(a,e){const t=a.geometry;if(e===M){const s=5*D;t.x<s?a.geometry={points:[[t.x,t.y],[e,0]]}:t.x>M-s&&(a.geometry={points:[[t.x,t.y],[-e,0]]})}else t.x<-D?a.geometry={points:[[t.x,t.y],[e,0]]}:t.x>M+D&&(a.geometry={points:[[t.x,t.y],[-e,0]]})}_processGraphics(a,e,t){if(!(e&&e.length)||!this._meshFactory)return null;const s=ie.from(e),i=this._meshFactory;return this._matcher.then(r=>i.analyzeGraphics(s,this.container.stage.resourceManager,r,null,null,t).then(()=>(this._attributeStore.sendUpdates(),this._processAnalyzedGraphics(a,s))))}_processAnalyzedGraphics(a,e){const t=this._meshFactory,s=e.getSize(),i=e.getCursor(),r={features:s,records:s,metrics:0},o=new Ht(a.key.id,r,{fill:"default"},!1,!1),n=[];for(;i.next();){const c=i.readGraphic();c.insertAfter=c.insertAfter===-1?-1:this._displayIds.get(c.insertAfter),c.displayId=this._displayIds.get(c.attributes[this.uid]);const u=new z(c.displayId);u.insertAfter=c.insertAfter,n.push(u),t.writeGraphic(o,i,a.level)}const h=a.tileInfoView.tileInfo.isWrappable,d=o.serialize(h);if(d.length!==1)return new b;const l=d[0].message;return b.fromVertexData(l,n)}_abortProcessingGraphic(a){this._graphicIdToAbortController.has(a)&&this._graphicIdToAbortController.get(a).abort()}_getNullSymbol(a){const e=a.geometry;return le(e)?pt:q(e)||Ie(e)?mt:gt}_flipUpdatingGraphics(){this._updatingGraphicsTimer&&clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=setTimeout(()=>{this._updatingGraphicsTimer=null,this.notifyChange("updating")},160),this.notifyChange("updating")}};F([I({constructOnly:!0})],B.prototype,"requestUpdateCallback",void 0),F([I()],B.prototype,"container",void 0),F([I({constructOnly:!0})],B.prototype,"graphics",void 0),F([I()],B.prototype,"updating",null),F([I()],B.prototype,"view",void 0),F([I()],B.prototype,"updateRequested",void 0),B=F([yt("esri.views.2d.layers.support.GraphicsView2D")],B);const As=B,ys=Math.PI/180,_s=4;class xs extends _t{constructor(e){super(),this._dvsMat3=Se(),this._localOrigin={x:0,y:0},this._getBounds=e}destroy(){this._vao&&(this._vao.dispose(!0),this._vao=null,this._vertexBuffer=null,this._indexBuffer=null),this._program&&(this._program.dispose(),this._program=null)}doRender(e){const{context:t}=e,s=this._getBounds();if(s.length<1)return;this._createShaderProgram(t),this._updateMatricesAndLocalOrigin(e),this._updateBufferData(t,s),t.setBlendingEnabled(!0),t.setDepthTestEnabled(!1),t.setStencilWriteMask(0),t.setStencilTestEnabled(!1),t.setBlendFunction(1,771),t.setColorMask(!0,!0,!0,!0);const i=this._program;t.bindVAO(this._vao),t.useProgram(i),i.setUniformMatrix3fv("u_dvsMat3",this._dvsMat3),t.gl.lineWidth(1),t.drawElements(1,8*s.length,5125,0),t.bindVAO()}_createTransforms(){return{dvs:Se()}}_createShaderProgram(e){if(this._program)return;const t=`precision highp float;
        uniform mat3 u_dvsMat3;

        attribute vec2 a_position;

        void main() {
          mediump vec3 pos = u_dvsMat3 * vec3(a_position, 1.0);
          gl_Position = vec4(pos.xy, 0.0, 1.0);
        }`,s=`precision mediump float;
      void main() {
        gl_FragColor = vec4(0.75, 0.0, 0.0, 0.75);
      }`;this._program=new xt(e,t,s,He().attributes)}_updateMatricesAndLocalOrigin(e){const{state:t}=e,{displayMat3:s,size:i,resolution:r,pixelRatio:o,rotation:n,viewpoint:h}=t,d=ys*n,{x:l,y:c}=h.targetGeometry,u=Te(l,t.spatialReference);this._localOrigin.x=u,this._localOrigin.y=c;const f=o*i[0],p=o*i[1],g=r*f,_=r*p,y=vt(this._dvsMat3);bt(y,y,s),Dt(y,y,Ct(f/2,p/2)),Bt(y,y,wt(i[0]/g,-p/_,1)),Tt(y,y,-d)}_updateBufferData(e,t){const{x:s,y:i}=this._localOrigin,r=2*_s*t.length,o=new Float32Array(r),n=new Uint32Array(8*t.length);let h=0,d=0;for(const l of t)l&&(o[2*h+0]=l[0]-s,o[2*h+1]=l[1]-i,o[2*h+2]=l[0]-s,o[2*h+3]=l[3]-i,o[2*h+4]=l[2]-s,o[2*h+5]=l[3]-i,o[2*h+6]=l[2]-s,o[2*h+7]=l[1]-i,n[d+0]=h+0,n[d+1]=h+3,n[d+2]=h+3,n[d+3]=h+2,n[d+4]=h+2,n[d+5]=h+1,n[d+6]=h+1,n[d+7]=h+0,h+=4,d+=8);if(this._vertexBuffer?this._vertexBuffer.setData(o.buffer):this._vertexBuffer=H.createVertex(e,35048,o.buffer),this._indexBuffer?this._indexBuffer.setData(n):this._indexBuffer=H.createIndex(e,35048,n),!this._vao){const l=He();this._vao=new De(e,l.attributes,l.bufferLayouts,{geometry:this._vertexBuffer},this._indexBuffer)}}}const He=()=>Ut("bounds",{geometry:[{location:0,name:"a_position",count:2,type:5126}]});class Gs extends Pt{constructor(e){super(e),this.hasHighlight=()=>!0}destroy(){super.destroy(),this._boundsRenderer&&(this._boundsRenderer.destroy(),this._boundsRenderer=null)}enableRenderingBounds(e){this._boundsRenderer=new xs(e),this.requestRender()}get hasLabels(){return!1}onTileData(e,t){e.patch(t),this.contains(e)||this.addChild(e),this.requestRender()}onTileError(e){e.clear(),this.contains(e)||this.addChild(e)}_renderChildren(e,t){for(const s of this.children)s.isReady&&s.hasData&&(s.commit(e),e.context.setStencilFunction(514,s.stencilRef,255),s._displayList.replay(e,s,t))}}export{As as i,Gs as t};
