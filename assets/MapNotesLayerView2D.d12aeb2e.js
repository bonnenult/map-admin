import{fX as m,b0 as p,as as u,bd as g,bg as n,cy as w,b5 as b,aX as y,aZ as j}from"./vendor.c8f3cc8c.js";import{l as V}from"./LayerView2D.25658a74.js";import{i as l}from"./GraphicContainer.02e1f23b.js";import{i as d}from"./BaseGraphicContainer.ed4b7b6a.js";import"./Container.98366c00.js";import"./EffectView.59df383f.js";import"./Utils.b2b84829.js";import"./number.dfbabd3f.js";import"./CIMSymbolHelper.05203bfb.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.dd7ec7e5.js";import"./projectionSupport.a9ad5f38.js";import"./json.2d0d6862.js";import"./FeatureContainer.f5fb900c.js";import"./visualVariablesUtils.98dff1e6.js";import"./visualVariablesUtils.9dcd3ad7.js";import"./TileContainer.b3c46ff1.js";import"./WGLContainer.465f24a3.js";import"./brushes.97799122.js";import"./programUtils.d5889455.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.56ac52e4.js";import"./pixelUtils.c614fa0a.js";import"./Matcher.b81ee078.js";import"./tileUtils.8432939a.js";import"./TileClipper.af441dba.js";import"./cimAnalyzer.ddfafba2.js";import"./cimSymbolUtils.441175f3.js";import"./schemaUtils.3bffe16f.js";import"./MD5.f9440c6b.js";import"./util.de314230.js";import"./ComputedAttributeStorage.8a8199a7.js";import"./FeatureSetReader.2ffb1ded.js";import"./centroid.d0af71ad.js";import"./GraphicsView.991cf1e8.js";const f="sublayers",h="layerView",C=Object.freeze({remove(){},pause(){},resume(){}});let c=class extends V(m){async fetchPopupFeatures(e){return Array.from(this.graphicsViews(),s=>s.hitTest(e).filter(i=>!!i.popupTemplate)).flat()}*graphicsViews(){p(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():p(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(e,s){const i=Array.from(this.graphicsViews(),async r=>{const a=await r.hitTest(e);if(p(this._graphicsViewsFeatureCollectionMap)){const t=this._graphicsViewsFeatureCollectionMap.get(r);for(const o of a)!o.popupTemplate&&t.popupTemplate&&(o.popupTemplate=t.popupTemplate)}return a});return(await Promise.all(i)).flat()}highlight(e){let s;if(typeof e=="number"?s=[e]:e instanceof u?s=[e.uid]:Array.isArray(e)&&e.length>0?s=typeof e[0]=="number"?e:e.map(i=>i&&i.uid):g.isCollection(e)&&(s=e.map(i=>i&&i.uid).toArray()),s=s.filter(i=>i!=null),!s.length)return C;for(const i of this.graphicsViews())i.addHighlight(s);return{remove:()=>{for(const i of this.graphicsViews())i.removeHighlight(s)}}}update(e){for(const s of this.graphicsViews())s.processUpdate(e)}attach(){const e=this.view,s=()=>this.requestUpdate(),i=this.layer.featureCollections;if(p(i)&&i.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const r of i){const a=new l(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const t=new d({view:e,graphics:r.source,renderer:r.renderer,requestUpdateCallback:s,container:a});this._graphicsViewsFeatureCollectionMap.set(t,r),this.container.addChild(t.container),this.handles.add([n(r,"visible",o=>t.container.visible=o),n(t,"updating",()=>this.notifyChange("updating"))],h)}}else p(this.layer.sublayers)&&this.handles.add(w(this.layer,"sublayers","change",()=>this._createGraphicsViews(),()=>this._createGraphicsViews(),()=>this._destroyGraphicsViews()),f)}detach(){this._destroyGraphicsViews(),this.handles.remove(f)}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews())e.viewChange()}isUpdating(){for(const e of this.graphicsViews())if(e.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(h);for(const e of this.graphicsViews())e.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),b(this.layer.sublayers))return;const e=[],s=this.view,i=()=>this.requestUpdate();for(const r of this.layer.sublayers){const a=new l(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const t=new d({view:s,graphics:r.graphics,requestUpdateCallback:i,container:a});this.handles.add([r.on("graphic-update",t.graphicUpdateHandler),n(r,"visible",o=>t.container.visible=o),n(t,"updating",()=>this.notifyChange("updating"))],h),this.container.addChild(t.container),e.push(t)}this._graphicsViews=e}};c=y([j("esri.views.2d.layers.MapNotesLayerView2D")],c);const oe=c;export{oe as default};
