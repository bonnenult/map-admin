import{bF as h,p as y,ib as m,r as o,qN as f,t as l,bZ as g,cZ as S,v as j,aH as v,fQ as w,N as b,d1 as k,hm as O,e as d,d as p,i as C,fr as F}from"./index.a1c5dd56.js";import{u as R}from"./normalizeUtilsSync.54c6d14c.js";import{m as A}from"./FeatureStore.aa5a6f84.js";import{L as $}from"./QueryEngine.88db6aab.js";import{o as E}from"./queryEngineUtils.cc2403e5.js";import"./vendor.c6be4c00.js";import"./index.a0863940.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./PooledRBush.adb2b2e6.js";import"./optimizedFeatureQueryEngineAdapter.07711bad.js";import"./centroid.89738b03.js";import"./WhereClause.f28b4275.js";import"./projectionSupport.716154a1.js";import"./json.2d0d6862.js";import"./QueryEngineCapabilities.83e56447.js";import"./utils.3ae8edb1.js";import"./ClassBreaksDefinition.334a5542.js";import"./spatialQuerySupport.7479ac53.js";let n=class extends h(y){constructor(e){super(e),this.availability=1,this.sources={multipoint:null,point:null,polygon:null,polyline:null},this.loadedWkids=new Set,this.loadedWkts=new Set,this.pendingAdds=[]}get updating(){return this.updatingHandles.updating}get layer(){return this.layerSource.layer}destroy(){const e=this.pendingAdds;this.pendingAdds.length=0;for(const t of e)t.task.abort();this.mapSources(t=>this.destroySource(t))}initialize(){this.handles.add([this.layer.on("graphic-update",e=>this.onGraphicUpdate(e)),this.updatingHandles.addOnCollectionChange(this.layer.graphics,e=>this.onGraphicsChanged(e))]),this.addMany(this.layer.graphics.toArray())}async fetchCandidates(e,t){const r=await m(this.mapSources(i=>i.queryEngine.executeQueryForSnapping({point:e.coordinateHelper.vectorToPoint(e.point).toJSON(),distance:e.distance,types:e.types,query:o(e.filter)?e.filter.createQuery().toJSON():{where:"1=1"}},t).then(({candidates:a})=>a))),s=r.flat().map(i=>E(i,e.coordinateHelper));return f(e.point,s),s}refresh(){}onGraphicUpdate(e){switch(e.property){case"geometry":case"visible":this.remove(e.graphic),this.addMany([e.graphic])}}onGraphicsChanged(e){for(const t of e.removed)this.remove(t);this.addMany(e.added)}addMany(e){const t=[],r=new Map;for(const s of e)l(s.geometry)||(this.needsInitializeProjection(s.geometry.spatialReference)?(t.push(s.geometry.spatialReference),r.set(s.uid,s)):this.add(s));this.createPendingAdd(t,r)}createPendingAdd(e,t){if(!e.length)return;const r=g(async a=>{await S(e.map(u=>({source:u,dest:this.spatialReference})),{signal:a}),this.markLoadedSpatialReferences(e);for(const[,u]of t)this.add(u)});this.updatingHandles.addPromise(r.promise);const s={task:r,graphics:t},i=()=>F(this.pendingAdds,s);r.promise.then(i,i),this.pendingAdds.push(s)}markLoadedSpatialReferences(e){for(const t of e)t.wkid!=null&&this.loadedWkids.add(t.wkid),t.wkt!=null&&this.loadedWkts.add(t.wkt)}add(e){if(l(e.geometry)||!e.visible)return;let t=e.geometry;if(t.type==="mesh")return;t.type==="extent"&&(t=j.fromExtent(t));const r=this.ensureSource(t.type);if(l(r))return;const s=this.createOptimizedFeature(e.uid,t);o(s)&&r.featureStore.add(s)}needsInitializeProjection(e){return(e.wkid==null||!this.loadedWkids.has(e.wkid))&&(e.wkt==null||!this.loadedWkts.has(e.wkt))&&!v(e,this.spatialReference)}createOptimizedFeature(e,t){const r=w(R(t),this.spatialReference);return r?new b(k(r,!1,!1),{[c]:e},null,e):null}ensureSource(e){const t=this.sources[e];if(o(t))return t;const r=this.createSource(e);return this.sources[e]=r,r}createSource(e){const t=O.toJSON(e),r=new A({geometryType:t,hasZ:!1,hasM:!1});return{featureStore:r,queryEngine:new $({featureStore:r,fields:[{name:c,type:"esriFieldTypeOID",alias:c}],geometryType:t,hasM:!1,hasZ:!1,objectIdField:c,spatialReference:this.spatialReference,scheduler:o(this.view)&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:e}}remove(e){this.mapSources(t=>this.removeFromSource(t,e));for(const t of this.pendingAdds)t.graphics.delete(e.uid),t.graphics.size===0&&t.task.abort()}removeFromSource(e,t){const r=t.uid;e.featureStore.has(r)&&e.featureStore.removeById(t.uid)}destroySource(e){e.queryEngine.destroy(),this.sources[e.type]=null}mapSources(e){const{point:t,polygon:r,polyline:s,multipoint:i}=this.sources,a=[];return o(t)&&a.push(e(t)),o(r)&&a.push(e(r)),o(s)&&a.push(e(s)),o(i)&&a.push(e(i)),a}};d([p({constructOnly:!0})],n.prototype,"spatialReference",void 0),d([p({constructOnly:!0})],n.prototype,"layerSource",void 0),d([p({constructOnly:!0})],n.prototype,"view",void 0),d([p({readOnly:!0})],n.prototype,"updating",null),d([p({readOnly:!0})],n.prototype,"availability",void 0),n=d([C("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],n);const c="OBJECTID";export{n as GraphicsSnappingSource};
