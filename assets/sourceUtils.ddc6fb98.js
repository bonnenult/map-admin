import{nA as m,i8 as g,nB as p,nC as y,nD as w,eA as d}from"./vendor.70daa49e.js";class b{constructor(){this.code=null,this.description=null}}class I{constructor(n){this.error=new b,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=n}}function f(e){return new I(e)}class v{constructor(n){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=n}}function A(e){return new v(e)}const l=new Set;function B(e,n,i,h=!1,u){l.clear();for(const r in i){const t=e.get(r);if(!t)continue;const a=i[r],s=j(t,a);if(s!==a&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:t,originalValue:a,sanitizedValue:s}}),l.add(t.name),t&&(h||t.editable)){const c=y(t,s);if(c)return f(w(c,t,s));n[t.name]=s}}for(const r of e.requiredFields)if(!l.has(r.name))return f(`missing required field "${r.name}"`);return null}function j(e,n){let i=n;return typeof n=="string"&&m(e)?i=parseFloat(n):n!=null&&g(e)&&typeof n!="string"&&(i=String(n)),p(i)}let o;function E(e,n){if(!e||!d(n))return e;if("rings"in e||"paths"in e){if(!o)throw new TypeError("geometry engine not loaded");return o.simplify(n,e)}return e}async function q(){return o||(o=await import("./geometryEngineJSON.0a4f94db.js"),o)}async function F(e,n){!d(e)||n!=="esriGeometryPolygon"&&n!=="esriGeometryPolyline"||await q()}export{A as c,B as d,E as h,f as u,F as y};
