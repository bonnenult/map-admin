import{eg as u,r as p,h as f,n as g,q as n,aS as w,t as j,e as b,i as y}from"./index.988b09cd.js";import{l as V}from"./LayerView2D.8eaa8439.js";import{i as l}from"./GraphicContainer.f5d6e760.js";import{i as d}from"./BaseGraphicContainer.c36cfb1f.js";import"./vendor.c6be4c00.js";import"./index.25aa0880.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./Container.b0eab594.js";import"./EffectView.8c4917f2.js";import"./Utils.56a5b8e8.js";import"./number.dfbabd3f.js";import"./CIMSymbolHelper.2f431254.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.76485664.js";import"./projectionSupport.0aea5e60.js";import"./json.2d0d6862.js";import"./FeatureContainer.840ef524.js";import"./visualVariablesUtils.2eb282ca.js";import"./visualVariablesUtils.08738833.js";import"./TileContainer.d9e05cad.js";import"./WGLContainer.c4152aca.js";import"./brushes.0945eb3a.js";import"./programUtils.cffd2d5b.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.d5a4d0f6.js";import"./pixelUtils.5acf42e1.js";import"./Matcher.a5267c34.js";import"./tileUtils.78233d4a.js";import"./TileClipper.1bed009a.js";import"./cimAnalyzer.644bcc6c.js";import"./cimSymbolUtils.d7ac92e9.js";import"./schemaUtils.2a5bddac.js";import"./MD5.f9440c6b.js";import"./util.c823b0c8.js";import"./ComputedAttributeStorage.38434ee7.js";import"./FeatureSetReader.c688f927.js";import"./centroid.0322b186.js";import"./GraphicsView.de7a8100.js";const m="sublayers",c="layerView",C=Object.freeze({remove(){},pause(){},resume(){}});let h=class extends V(u){async fetchPopupFeatures(e){return Array.from(this.graphicsViews(),s=>s.hitTest(e).filter(i=>!!i.popupTemplate)).flat()}*graphicsViews(){p(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():p(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(e,s){const i=Array.from(this.graphicsViews(),async r=>{const a=await r.hitTest(e);if(p(this._graphicsViewsFeatureCollectionMap)){const t=this._graphicsViewsFeatureCollectionMap.get(r);for(const o of a)!o.popupTemplate&&t.popupTemplate&&(o.popupTemplate=t.popupTemplate)}return a});return(await Promise.all(i)).flat()}highlight(e){let s;if(typeof e=="number"?s=[e]:e instanceof f?s=[e.uid]:Array.isArray(e)&&e.length>0?s=typeof e[0]=="number"?e:e.map(i=>i&&i.uid):g.isCollection(e)&&(s=e.map(i=>i&&i.uid).toArray()),s=s.filter(i=>i!=null),!s.length)return C;for(const i of this.graphicsViews())i.addHighlight(s);return{remove:()=>{for(const i of this.graphicsViews())i.removeHighlight(s)}}}update(e){for(const s of this.graphicsViews())s.processUpdate(e)}attach(){const e=this.view,s=()=>this.requestUpdate(),i=this.layer.featureCollections;if(p(i)&&i.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const r of i){const a=new l(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const t=new d({view:e,graphics:r.source,renderer:r.renderer,requestUpdateCallback:s,container:a});this._graphicsViewsFeatureCollectionMap.set(t,r),this.container.addChild(t.container),this.handles.add([n(r,"visible",o=>t.container.visible=o),n(t,"updating",()=>this.notifyChange("updating"))],c)}}else p(this.layer.sublayers)&&this.handles.add(w(this.layer,"sublayers","change",()=>this._createGraphicsViews(),()=>this._createGraphicsViews(),()=>this._destroyGraphicsViews()),m)}detach(){this._destroyGraphicsViews(),this.handles.remove(m)}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews())e.viewChange()}isUpdating(){for(const e of this.graphicsViews())if(e.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(c);for(const e of this.graphicsViews())e.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),j(this.layer.sublayers))return;const e=[],s=this.view,i=()=>this.requestUpdate();for(const r of this.layer.sublayers){const a=new l(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const t=new d({view:s,graphics:r.graphics,requestUpdateCallback:i,container:a});this.handles.add([r.on("graphic-update",t.graphicUpdateHandler),n(r,"visible",o=>t.container.visible=o),n(t,"updating",()=>this.notifyChange("updating"))],c),this.container.addChild(t.container),e.push(t)}this._graphicsViews=e}};h=b([y("esri.views.2d.layers.MapNotesLayerView2D")],h);const le=h;export{le as default};
