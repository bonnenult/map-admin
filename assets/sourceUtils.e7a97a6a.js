import{lY as g,gv as m,lZ as p,l_ as y,l$ as w,cV as d}from"./index.a1c5dd56.js";class I{constructor(){this.code=null,this.description=null}}class b{constructor(t){this.error=new I,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function f(e){return new b(e)}class v{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function V(e){return new v(e)}const a=new Set;function x(e,t,i,h=!1,u){a.clear();for(const s in i){const n=e.get(s);if(!n)continue;const l=i[s],r=j(n,l);if(r!==l&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:n,originalValue:l,sanitizedValue:r}}),a.add(n.name),n&&(h||n.editable)){const c=y(n,r);if(c)return f(w(c,n,r));t[n.name]=r}}for(const s of e.requiredFields)if(!a.has(s.name))return f(`missing required field "${s.name}"`);return null}function j(e,t){let i=t;return typeof t=="string"&&g(e)?i=parseFloat(t):t!=null&&m(e)&&typeof t!="string"&&(i=String(t)),p(i)}let o;function E(e,t){if(!e||!d(t))return e;if("rings"in e||"paths"in e){if(!o)throw new TypeError("geometry engine not loaded");return o.simplify(t,e)}return e}async function q(){return o||(o=await import("./geometryEngineJSON.4f1e35da.js"),o)}async function F(e,t){!d(e)||t!=="esriGeometryPolygon"&&t!=="esriGeometryPolyline"||await q()}export{V as c,x as d,E as h,f as u,F as y};
