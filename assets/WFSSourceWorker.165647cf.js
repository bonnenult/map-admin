import{T as p,cW as m,gE as o,r as d,d1 as g,dl as f,ds as _,aI as j,an as u,bZ as b,g as E,X as w}from"./index.fe92decb.js";import{m as F}from"./FeatureStore.bbd041a1.js";import{g as q,f as S}from"./projectionSupport.18cf131f.js";import{L as x}from"./QueryEngine.21211b4f.js";import{O as T,L as C}from"./geojson.9f101bb4.js";import{d as I}from"./sourceUtils.d20f2d1c.js";import{K as k}from"./wfsUtils.074db13b.js";import"./vendor.d9e807b5.js";import"./index.dbbecfd7.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./PooledRBush.24e35ea4.js";import"./optimizedFeatureQueryEngineAdapter.e1159fff.js";import"./centroid.4f152857.js";import"./json.2d0d6862.js";import"./WhereClause.ab673712.js";import"./QueryEngineCapabilities.83e56447.js";import"./utils.879dba7b.js";import"./ClassBreaksDefinition.64fe6ccb.js";import"./spatialQuerySupport.cbbdf73b.js";import"./xmlUtils.9790bce4.js";class ee{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async e=>{const{objectIdField:t}=this._queryEngine,r=await k(this._getFeatureUrl,this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(s=>s.name),signal:e});await T(r),p(e);const a=C(r,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:t});if(!m(this._queryEngine.spatialReference,o))for(const s of a)d(s.geometry)&&(s.geometry=g(q(f(s.geometry,this._queryEngine.geometryType,!1,!1),o,this._queryEngine.spatialReference)));let n=1;for(const s of a){const i={};I(this._fieldsIndex,i,s.attributes,!0),s.attributes=i,s.attributes[t]==null&&(s.objectId=s.attributes[t]=n++)}return a}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=null}async load(e,t){const{getFeatureUrl:r,getFeatureOutputFormat:a,spatialReference:n,fields:s,geometryType:i,featureType:h,objectIdField:c,customParameters:y}=e;this._featureType=h,this._customParameters=y,this._getFeatureUrl=r,this._getFeatureOutputFormat=a,this._fieldsIndex=new _(s),await this._checkProjection(n),p(t),this._queryEngine=new x({fields:s,geometryType:i,hasM:!1,hasZ:!1,objectIdField:c,spatialReference:n,timeInfo:null,featureStore:new F({geometryType:i,hasM:!1,hasZ:!1})});const l=await this._snapshotFeatures(j(t.signal));return this._queryEngine.featureStore.addMany(l),{extent:this._queryEngine.fullExtent}}async applyEdits(){throw new u("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var t;return this._customParameters=e,(t=this._snapshotTask)==null||t.abort(),this._snapshotTask=b(this._snapshotFeatures),this._snapshotTask.promise.then(r=>{this._queryEngine.featureStore.clear(),r&&this._queryEngine.featureStore.addMany(r)},r=>{this._queryEngine.featureStore.clear(),E(r)||w.getLogger("esri.layers.WFSLayer").error(new u("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:r}))}),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(e){try{await S(o,e)}catch{throw new u("unsupported-projection","Projection not supported",{spatialReference:e})}}}export{ee as default};
