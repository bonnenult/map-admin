var g=Object.defineProperty;var p=Object.getOwnPropertySymbols;var f=Object.prototype.hasOwnProperty,j=Object.prototype.propertyIsEnumerable;var d=(e,t,i)=>t in e?g(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,h=(e,t)=>{for(var i in t||(t={}))f.call(t,i)&&d(e,i,t[i]);if(p)for(var i of p(t))j.call(t,i)&&d(e,i,t[i]);return e};import{e as a,i as n,X as u,mC as b,g as y,eh as w,d as m,eg as v}from"./index.fe92decb.js";import{t as C}from"./BitmapContainer.0f2de15d.js";import{l as x}from"./LayerView2D.7ca65bda.js";import{t as U,i as I}from"./BaseGraphicContainer.67656288.js";import{I as G}from"./Utils.b6ae6dd5.js";import{S}from"./ExportStrategy.a966b2f3.js";import{y as V}from"./MapImageLayerView.8dd09faa.js";import{i as M}from"./RefreshableLayerView.4c074742.js";import"./vendor.d9e807b5.js";import"./index.dbbecfd7.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./brushes.54912a2b.js";import"./definitions.21e97413.js";import"./programUtils.bb88f8de.js";import"./number.dfbabd3f.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.2ed20ae2.js";import"./pixelUtils.bd04c746.js";import"./WGLContainer.8d1ee991.js";import"./Container.2f7d1138.js";import"./EffectView.873e2976.js";import"./CIMSymbolHelper.0a12f9a9.js";import"./BidiEngine.aae60613.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.503cfc44.js";import"./projectionSupport.18cf131f.js";import"./json.2d0d6862.js";import"./FeatureContainer.8f6f9a19.js";import"./visualVariablesUtils.57af9670.js";import"./visualVariablesUtils.2043fc08.js";import"./TileContainer.78074cd9.js";import"./Matcher.4b214574.js";import"./tileUtils.6a16d9da.js";import"./TileClipper.34d95dd2.js";import"./cimAnalyzer.da7b7ced.js";import"./cimSymbolUtils.d6efc770.js";import"./schemaUtils.52b6278f.js";import"./MD5.f9440c6b.js";import"./util.103b8071.js";import"./ComputedAttributeStorage.4b3ca333.js";import"./FeatureSetReader.2f3c5dca.js";import"./centroid.4f152857.js";import"./GraphicsView.390bb3e3.js";import"./Bitmap.5c133e5a.js";import"./ExportImageParameters.676cd283.js";import"./popupUtils.16f9871e.js";let o=class extends U{renderChildren(e){if(e.drawPhase!==G.HIGHLIGHT||(this.attributeView.bindTextures(e.context),!this.children.some(r=>r.hasData)))return;super.renderChildren(e);const{painter:t}=e,i=t.effects.highlight;i.bind(e),e.context.setColorMask(!0,!0,!0,!0),e.context.clear(16384),this._renderChildren(e,i.defines.concat(["highlightAll"])),i.draw(e),i.unbind()}};o=a([n("esri.views.2d.layers.support.HighlightGraphicContainer")],o);const q=o,_=u.getLogger("esri.views.2d.layers.MapImageLayerView2D");let s=class extends V(M(x(v))){constructor(){super(...arguments),this._highlightGraphics=new b}update(e){this.strategy.update(e).catch(t=>{y(t)||_.error(t)})}attach(){const{imageMaxWidth:e,imageMaxHeight:t,version:i}=this.layer,r=i>=10.3,c=i>=10;this._bitmapContainer=new C,this.container.addChild(this._bitmapContainer);const l=new I({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new q(this.view.featuresTilingScheme)});this.container.addChild(l.container),this.strategy=new S({container:this._bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxWidth:e,imageMaxHeight:t,imageRotationSupported:r,imageNormalizationSupported:c,hidpi:!0}),this.handles.add(this.watch("exportImageVersion",()=>this.requestUpdate()),"exportImageVersion"),this.handles.add(this.watch("view.floors",()=>this.requestUpdate()),"view.floors"),this.requestUpdate()}detach(){this.handles.remove("exportImageVersion"),this.handles.remove("view.floors"),this.strategy.destroy(),this.container.removeAllChildren(),this._bitmapContainer.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}highlight(e,t){return this._highlightGraphics.add(e),{remove:()=>{this._highlightGraphics.remove(e)}}}createFetchPopupFeaturesQueryGeometry(e,t){return w(e,t,this.view)}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(e,t,i,r){return this.layer.fetchImage(e,t,i,h({timeExtent:this.timeExtent,floors:this.view.floors},r))}};a([m()],s.prototype,"strategy",void 0),a([m()],s.prototype,"updating",void 0),s=a([n("esri.views.2d.layers.MapImageLayerView2D")],s);const Se=s;export{Se as default};
