var z=Object.defineProperty,U=Object.defineProperties;var L=Object.getOwnPropertyDescriptors;var O=Object.getOwnPropertySymbols;var P=Object.prototype.hasOwnProperty,j=Object.prototype.propertyIsEnumerable;var C=(e,t,i)=>t in e?z(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,V=(e,t)=>{for(var i in t||(t={}))P.call(t,i)&&C(e,i,t[i]);if(O)for(var i of O(t))j.call(t,i)&&C(e,i,t[i]);return e},M=(e,t)=>U(e,L(t));import{pK as K,nP as u,X as N,J as q,u as R,n as H,av as J,pN as k,b as I,t as w,jU as B,i_ as X,n_ as Z,oP as Q,nS as W,r as b,ka as A,pL as S,h as x,aA as f,at as $,pR as T,bZ as Y,pI as ee,pS as te,an as ie,e as v,d as m,i as se,pG as oe,bH as re}from"./index.a1c5dd56.js";import ne from"./GraphicMover.c1bc2d5f.js";import"./vendor.c6be4c00.js";import"./index.a0863940.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */class ae{constructor(t,i,s){this.graphic=t,this.mover=i,this.selected=s,this.type="reshape-start"}}class he{constructor(t,i,s){this.graphic=t,this.mover=i,this.selected=s,this.type="reshape"}}class ce{constructor(t,i,s){this.graphic=t,this.mover=i,this.selected=s,this.type="reshape-stop"}}class pe{constructor(t,i,s){this.mover=t,this.dx=i,this.dy=s,this.type="move-start"}}class le{constructor(t,i,s){this.mover=t,this.dx=i,this.dy=s,this.type="move"}}class de{constructor(t,i,s){this.mover=t,this.dx=i,this.dy=s,this.type="move-stop"}}class ve{constructor(t){this.added=t,this.type="vertex-select"}}class me{constructor(t){this.removed=t,this.type="vertex-deselect"}}class ye{constructor(t,i,s,o){this.added=t,this.graphic=i,this.oldGraphic=s,this.vertices=o,this.type="vertex-add"}}class _e{constructor(t,i,s,o){this.removed=t,this.graphic=i,this.oldGraphic=s,this.vertices=o,this.type="vertex-remove"}}const y=K.reshapeGraphics,E={vertices:{default:new u({style:"circle",size:y.vertex.size,color:y.vertex.color,outline:{color:y.vertex.outlineColor,width:1}}),hover:new u({style:"circle",size:y.vertex.hoverSize,color:y.vertex.hoverColor,outline:{color:y.vertex.hoverOutlineColor,width:1}}),selected:new u({style:"circle",size:y.selected.size,color:y.selected.color,outline:{color:y.selected.outlineColor,width:1}})},midpoints:{default:new u({style:"circle",size:y.midpoint.size,color:y.midpoint.color,outline:{color:y.midpoint.outlineColor,width:1}}),hover:new u({style:"circle",size:y.midpoint.size,color:y.midpoint.color,outline:{color:y.midpoint.outlineColor,width:1}})}},F="esri.views.draw.support.Reshape",ge=N.getLogger(F);let d=class extends q.EventedAccessor{constructor(e){super(e),this._activeOperationInfo=null,this._editGeometryOperations=null,this._handles=new R,this._graphicAttributes={esriSketchTool:"box"},this._mover=null,this._snappingTask=null,this._stagedVertex=null,this._viewHandles=new R,this.callbacks={onReshapeStart(){},onReshape(){},onReshapeStop(){},onMoveStart(){},onMove(){},onMoveStop(){},onGraphicClick(){}},this.enableMidpoints=!0,this.enableMovement=!0,this.enableVertices=!0,this.graphic=null,this.vertexGraphics=new H,this.layer=null,this.midpointGraphics=new H,this.midpointSymbol=new u({style:"circle",size:6,color:[200,200,200],outline:{color:[100,100,100],width:1}}),this.selectedVertices=[],this.snappingManager=null,this.type="reshape",this.view=null}initialize(){this._setup(),this._handles.add([J(this,"view.ready",()=>{const{layer:e,view:t}=this;oe(t,e),this._viewHandles.add([t.on("key-down",i=>this._keyDownHandler(i),re.TOOL)])}),k(this,"graphic",()=>this.refresh()),k(this,"layer",(e,t)=>{t&&(this._clearSelection(),this._resetGraphics(t)),this.refresh()}),k(this,"enableMidpoints",()=>{this.refresh()})])}destroy(){var e;this._reset(),(e=this._mover)==null||e.destroy(),this._mover=null,this._handles=I(this._handles),this._viewHandles=I(this._viewHandles)}get state(){const e=!!this.get("view.ready"),t=!(!this.get("graphic")||!this.get("layer"));return e&&t?"active":e?"ready":"disabled"}set symbols(e){const{midpoints:t=E.midpoints,vertices:i=E.vertices}=e||{};this._set("symbols",{midpoints:t,vertices:i})}isUIGraphic(e){const t=[];return this.graphic&&t.push(this.graphic),t.concat(this.vertexGraphics.items,this.midpointGraphics.items),t.length&&t.includes(e)}refresh(){this._reset(),this._setup()}reset(){this.graphic=null}clearSelection(){this._clearSelection()}removeSelectedVertices(){this.selectedVertices.length&&this._removeVertices(this.selectedVertices)}_setup(){const{graphic:e,layer:t}=this;if(!t||!e||w(e.geometry))return;const i=e.geometry;i.type!=="mesh"&&i.type!=="extent"?(this._setupGraphics(),this._setupMover()):this._logGeometryTypeError()}_setUpGeometryHelper(){const e=this.graphic.geometry;if(w(e)||e.type==="mesh"||e.type==="extent")return void this._logGeometryTypeError();const t=e.type==="multipoint"?new B({paths:e.points,spatialReference:e.spatialReference}):e;this._editGeometryOperations=X.fromGeometry(t,2)}_saveSnappingContextForHandle(e,t){var i;this._snappingGraphicsLayer=new Z({listMode:"hide",internal:!0,title:"Reshape snapping layer"}),this.view.map.layers.add(this._snappingGraphicsLayer),this._snappingContext=new Q({editGeometryOperations:this._editGeometryOperations,elevationInfo:{mode:"on-the-ground",offset:0},pointer:((i=t.viewEvent)==null?void 0:i.pointerType)||"mouse",excludeFeature:this.graphic,visualizer:new W(this._snappingGraphicsLayer),vertexHandle:this._getVertexFromEditGeometry(e)})}_reset(){this._clearSelection(),this._resetGraphics(),this._resetSnappingStateVars(),this._activeOperationInfo=null,this._mover&&this._mover.destroy(),this._mover=null,this.view.cursor="default"}_resetSnappingStateVars(){b(this.snappingManager)&&this.snappingManager.doneSnapping(),b(this._snappingGraphicsLayer)&&(this.view.map.layers.remove(this._snappingGraphicsLayer),this._snappingGraphicsLayer.destroy()),this._editGeometryOperations=I(this._editGeometryOperations),this._snappingTask=A(this._snappingTask),this._snappingTask=null,this._snappingContext=null,this._stagedVertex=null}_resetGraphics(e){this._removeMidpointGraphics(e),this._removeVertexGraphics(e),this._set("selectedVertices",[])}_removeMidpointGraphics(e){const t=e||this.layer;t&&t.removeMany(this.midpointGraphics.items),this.midpointGraphics.items.forEach(i=>i.destroy()),this.midpointGraphics.removeAll()}_removeVertexGraphics(e){const t=e||this.layer;t&&t.removeMany(this.vertexGraphics.items),this.vertexGraphics.items.forEach(i=>i.destroy()),this.vertexGraphics.removeAll()}_getCoordinatesForUI(e){const t=S(e.clone());if(e.type==="polygon")for(const i of t){const s=i[i.length-1];i[0][0]===s[0]&&i[0][1]===s[1]&&i.length>2&&i.pop()}return t}_setupGraphics(){const e=this.graphic.geometry;if(b(e)&&(e.type==="polyline"||e.type==="polygon")){const t=this._getCoordinatesForUI(e);this.enableMidpoints&&this._setUpMidpointGraphics(t),this.enableVertices&&this._setUpVertexGraphics(t)}}_setUpMidpointGraphics(e){this._removeMidpointGraphics();const t=this._createMidpointGraphics(e);this.midpointGraphics.addMany(t),this.layer.addMany(t)}_setUpVertexGraphics(e){this._removeVertexGraphics();const t=this._createVertexGraphics(e);this.vertexGraphics.addMany(t),this._storeRelatedVertexIndices(),this.layer.addMany(t)}_createVertexGraphics(e){const{_graphicAttributes:t,symbols:i,view:{spatialReference:s}}=this,o=[];return e==null||e.forEach((n,r)=>{n.forEach((c,a)=>{var h;const[p,l]=c;o.push(new x({geometry:new f({x:p,y:l,spatialReference:s}),symbol:i==null||(h=i.vertices)==null?void 0:h.default,attributes:M(V({},t),{pathIndex:r,pointIndex:a})}))})}),o}_createMidpointGraphics(e){const{_graphicAttributes:t,symbols:i,view:{spatialReference:s}}=this,o=[];return e==null||e.forEach((n,r)=>{n.forEach((c,a)=>{const[h,p]=c,l=n[a+1]?a+1:0;if($(this.graphic.geometry,"type")==="polygon"||l!==0){const[_,g]=n[l],[G,D]=T([h,p],[_,g]);o.push(new x({geometry:new f({x:G,y:D,spatialReference:s}),symbol:i.midpoints.default,attributes:M(V({},t),{pathIndex:r,pointIndexStart:a,pointIndexEnd:l})}))}})}),o}_storeRelatedVertexIndices(){const e=this.vertexGraphics.items;if(!e)return;const t=e.map(({geometry:i})=>({x:i.x,y:i.y}));for(let i=0;i<t.length;i++){const s=[];for(let o=0;o<t.length;o++){if(i===o)continue;const n=t[i],r=t[o];n.x===r.x&&n.y===r.y&&s.push(o)}e[i].attributes.relatedGraphicIndices=s}}_setupMover(){const{enableMovement:e,graphic:t,midpointGraphics:i,vertexGraphics:s,view:o}=this,n=$(t.geometry,"type"),r=n==="point"||n==="multipoint",c=s.concat(i).items;e&&c.push(t),this._mover=new ne({enableMoveAllGraphics:!1,indicatorsEnabled:r,graphics:c,view:o,callbacks:{onGraphicClick:a=>this._onGraphicClickCallback(a),onGraphicMoveStart:a=>this._onGraphicMoveStartCallback(a),onGraphicMove:a=>this._onGraphicMoveCallback(a),onGraphicMoveStop:a=>this._onGraphicMoveStopCallback(a),onGraphicPointerOver:a=>this._onGraphicPointerOverCallback(a),onGraphicPointerOut:a=>this._onGraphicPointerOutCallback(a)}})}_onGraphicClickCallback(e){e.viewEvent.stopPropagation();const t=e.graphic;if(t===this.graphic)this.clearSelection(),this.emit("graphic-click",e),this.callbacks.onGraphicClick&&this.callbacks.onGraphicClick(e);else if(this._isMidpoint(t)){if(e.viewEvent.button===2)return;const i=this.graphic.clone(),s=this._createVertexFromMidpoint(t);this.refresh(),this._emitVertexAddEvent([t],i,s)}else this._isVertex(t)&&(e.viewEvent.stopPropagation(),e.viewEvent.button===2?this._removeVertices(t):(e.viewEvent.native.shiftKey||this._clearSelection(),this.selectedVertices.includes(t)?this._removeFromSelection(t,!0):this._addToSelection(t)))}_setUpOperation(e){const{graphic:t,dx:i,dy:s}=e,o=t===this.graphic;this._resetSnappingStateVars(),this._setUpGeometryHelper(),this._saveSnappingContextForHandle(t,e),this._activeOperationInfo={target:this.graphic,mover:t,operationType:o?"move":"reshape",totalDx:i,totalDy:s}}_onGraphicMoveStartCallback(e){const t=e.graphic,{dx:i,dy:s}=e;if(t===this.graphic)return this._clearSelection(),this._resetGraphics(),this._setUpOperation(e),this._emitMoveStartEvent(i,s),void(this._editGeometryOperations.data.type==="point"&&this._onHandleMove(t,i,s,e,()=>this._emitMoveEvent(i,s)));if(!this.selectedVertices.includes(t)){if(this._clearSelection(),this._isMidpoint(t)){const o=this.graphic.clone(),n=this._createVertexFromMidpoint(t);this._emitVertexAddEvent([t],o,n)}this._addToSelection(t)}this._setUpOperation(e),this._emitReshapeStartEvent(t),this._onHandleMove(t,i,s,e,()=>this._emitReshapeEvent(t))}_onGraphicMoveCallback(e){const{graphic:t,dx:i,dy:s}=e;this._activeOperationInfo.totalDx+=i,this._activeOperationInfo.totalDy+=s;const{operationType:o}=this._activeOperationInfo;o==="move"?this._editGeometryOperations.data.type==="point"?this._onHandleMove(t,i,s,e,()=>this._emitMoveEvent(i,s)):this._emitMoveEvent(i,s):this._onHandleMove(t,i,s,e,()=>this._emitReshapeEvent(t))}_onGraphicMoveStopCallback(e){const{graphic:t,dx:i,dy:s}=e;this._activeOperationInfo.totalDx+=i,this._activeOperationInfo.totalDy+=s,t===this.graphic?(this._emitMoveStopEvent(),this.refresh()):(this._onHandleMove(t,i,s,e,()=>this._emitReshapeStopEvent(t)),this._resetSnappingStateVars(),this._activeOperationInfo=null,this._isMidpoint(t)&&this.refresh())}_updateMidpointGraphicLocations(e){for(const t of this.midpointGraphics){const{pathIndex:i,pointIndexStart:s,pointIndexEnd:o}=t.attributes,[n,r]=e[i][s],[c,a]=e[i][o],[h,p]=T([n,r],[c,a]);t.geometry=new f({x:h,y:p,spatialReference:this.view.spatialReference})}}_getIndicesForVertexGraphic({attributes:e}){return[(e==null?void 0:e.pathIndex)||0,(e==null?void 0:e.pointIndex)||0]}_getVertexFromEditGeometry(e){const[t,i]=this._getIndicesForVertexGraphic(e);return this._editGeometryOperations.data.components[t].vertices[i]}_onHandleMove(e,t,i,s,o){if(A(this._snappingTask),!this._snappingContext)return;const n=e.geometry,r=s.type==="graphic-move-stop";if(b(this.snappingManager)&&this.selectedVertices.length<2&&!r){const c=this.snappingManager;this._stagedVertex=c.update(n,this._snappingContext),this._syncGeometryAfterVertexMove(e,new f(this._stagedVertex),t,i,r),o(),this._snappingTask=Y(async a=>{const h=await c.snap(n,this._snappingContext,a);h.valid&&(this._stagedVertex=h.apply(),this._syncGeometryAfterVertexMove(e,new f(this._stagedVertex),t,i,r),o())})}else{const c=b(this._stagedVertex)?new f(this._stagedVertex):n;this._syncGeometryAfterVertexMove(e,c,t,i,r),o()}}async _syncGeometryAfterVertexMove(e,t,i,s,o=!1){const n=this._editGeometryOperations.data.geometry;if(n.type==="point")e.geometry=t;else{const{x:r,y:c}=t,[a,h]=this._getIndicesForVertexGraphic(e);let p=S(n);const l=p[a].length-1;p[a][h]=[r,c],n.type==="polygon"&&(h===0?p[a][l]=[r,c]:h===l&&(p[a][0]=[r,c])),this._isVertex(e)&&(p=this._moveRelatedCoordinates(p,e,r,c),p=this._moveSelectedHandleCoordinates(p,e,i,s,n.type==="polygon"),this._updateMidpointGraphicLocations(p)),this.graphic.geometry=n.clone();const _=this._getVertexFromEditGeometry(e),g=r-_.pos[0],G=c-_.pos[1];this._editGeometryOperations.moveVertices([_],g,G,0),o&&(this._mover?this._mover.updateGeometry(this._mover.graphics.indexOf(e),t):e.geometry=t)}}_moveRelatedCoordinates(e,t,i,s){const{relatedGraphicIndices:o}=t.attributes;for(const n of o){const r=this.vertexGraphics.getItemAt(n),{pathIndex:c,pointIndex:a}=r.attributes;e[c][a]=[i,s],r.geometry=t.geometry}return e}_moveSelectedHandleCoordinates(e,t,i,s,o){for(const n of this.selectedVertices)if(n!==t){const{pathIndex:r,pointIndex:c,relatedGraphicIndices:a}=n.attributes,h=ee(n.geometry,i,s,this.view),p=e[r].length-1;e[r][c]=[h.x,h.y],n.geometry=h,o&&(c===0?e[r][p]=[h.x,h.y]:c===p&&(e[r][0]=[h.x,h.y]));for(const l of a){const _=this.vertexGraphics.getItemAt(l),{pathIndex:g,pointIndex:G}=_.attributes;e[g][G]=[h.x,h.y],_.geometry=h}}return e}_onGraphicPointerOverCallback(e){const t=e.graphic;this._isVertex(t)&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.hover),this._updateHoverCursor(t)}_onGraphicPointerOutCallback(e){const t=e.graphic;this._isVertex(t)&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.default),this.view.cursor="default"}_createVertexFromMidpoint(e){const{_graphicAttributes:t,graphic:i}=this,s=i.geometry;if(w(s)||s.type!=="polygon"&&s.type!=="polyline")return[];const o=s.clone(),n=[],{pathIndex:r,pointIndexStart:c,pointIndexEnd:a}=e.attributes,{x:h,y:p}=e.geometry,l=a===0?c+1:a,_=S(o);return _[r].splice(l,0,[h,p]),e.attributes=M(V({},t),{pathIndex:r,pointIndex:l,relatedGraphicIndices:[]}),n.push({coordinates:_[r][l],componentIndex:r,vertexIndex:l}),this.graphic.geometry=o,n}_addToSelection(e){e instanceof x&&(e=[e]);for(const t of e)t.symbol=this.symbols.vertices.selected;this._set("selectedVertices",this.selectedVertices.concat(e)),this._emitSelectEvent(e)}_removeFromSelection(e,t){const{vertices:i}=this.symbols,s=t?i.hover:i.default;e instanceof x&&(e=[e]);for(const o of e)this.selectedVertices.splice(this.selectedVertices.indexOf(o),1),this._set("selectedVertices",this.selectedVertices),o.set("symbol",s);this._emitDeselectEvent(e)}_clearSelection(){if(this.selectedVertices.length){const e=this.selectedVertices;for(const t of this.selectedVertices)t.set("symbol",this.symbols.vertices.default);this._set("selectedVertices",[]),this._emitDeselectEvent(e)}}_keyDownHandler(e){te.delete.includes(e.key)&&!e.repeat&&this.selectedVertices.length&&this._removeVertices(this.selectedVertices)}_removeVertices(e){const t=this.graphic.geometry;if(w(t)||t.type!=="polygon"&&t.type!=="polyline"||t.type==="polygon"&&this.vertexGraphics.length<4||this.vertexGraphics.length<3)return;e instanceof x&&(e=[e]);const i=this.graphic.clone(),s=t.clone();let o=S(s);const n=[];e instanceof x&&(e=[e]);for(const r of e){const{x:c,y:a}=r.geometry;for(let h=0;h<o.length;h++){const p=o[h];for(let l=0;l<p.length;l++){const[_,g]=p[l];c===_&&a===g&&(n.push({coordinates:o[h][l],componentIndex:h,vertexIndex:l}),o[h].splice(Number(l),1))}}}if(s.type==="polygon")o=o.filter(r=>{if(r.length<2)return!1;const[c,a]=r[0],[h,p]=r[r.length-1];return(r.length!==2||c!==h||a!==p)&&(c===h&&a===p||r.push(r[0]),!0)}),s.rings=o;else{for(const r of o)r.length===1&&o.splice(o.indexOf(r),1);s.paths=o}this.graphic.geometry=s,this.refresh(),this._emitVertexRemoveEvent(e,i,n)}_isVertex(e){return this.vertexGraphics.includes(e)}_isSelected(e){return this._isVertex(e)&&this.selectedVertices.includes(e)}_isMidpoint(e){return this.midpointGraphics.includes(e)}_updateHoverCursor(e){this.view.cursor=this._isMidpoint(e)?"copy":"move"}_emitMoveStartEvent(e,t){const i=new pe(this.graphic,e,t);this.emit("move-start",i),this.callbacks.onMoveStart&&this.callbacks.onMoveStart(i)}_emitMoveEvent(e,t){const i=new le(this.graphic,e,t);this.emit("move",i),this.callbacks.onMove&&this.callbacks.onMove(i)}_emitMoveStopEvent(){const{totalDx:e,totalDy:t}=this._activeOperationInfo,i=new de(this.graphic,e,t);this.emit("move-stop",i),this.callbacks.onMoveStop&&this.callbacks.onMoveStop(i)}_emitReshapeStartEvent(e){const t=new ae(this.graphic,e,this.selectedVertices);this.emit("reshape-start",t),this.callbacks.onReshapeStart&&this.callbacks.onReshapeStart(t)}_emitReshapeEvent(e){const t=new he(this.graphic,e,this.selectedVertices);this.emit("reshape",t),this.callbacks.onReshape&&this.callbacks.onReshape(t)}_emitReshapeStopEvent(e){const t=new ce(this.graphic,e,this.selectedVertices);this.emit("reshape-stop",t),this.callbacks.onReshapeStop&&this.callbacks.onReshapeStop(t)}_emitSelectEvent(e){const t=new ve(e);this.emit("select",t),this.callbacks.onVertexSelect&&this.callbacks.onVertexSelect(t)}_emitDeselectEvent(e){const t=new me(e);this.emit("deselect",t),this.callbacks.onVertexDeselect&&this.callbacks.onVertexDeselect(t)}_emitVertexAddEvent(e,t,i){const s=new ye(e,this.graphic,t,i);this.emit("vertex-add",s),this.callbacks.onVertexAdd&&this.callbacks.onVertexAdd(s)}_emitVertexRemoveEvent(e,t,i){const s=new _e(e,this.graphic,t,i);this.emit("vertex-remove",s),this.callbacks.onVertexRemove&&this.callbacks.onVertexRemove(s)}_logGeometryTypeError(){ge.error(new ie("reshape:invalid-geometry","Reshape operation not supported for the provided graphic. The geometry type is not supported."))}};v([m()],d.prototype,"callbacks",void 0),v([m()],d.prototype,"enableMidpoints",void 0),v([m()],d.prototype,"enableMovement",void 0),v([m()],d.prototype,"enableVertices",void 0),v([m()],d.prototype,"graphic",void 0),v([m({readOnly:!0})],d.prototype,"vertexGraphics",void 0),v([m()],d.prototype,"layer",void 0),v([m({readOnly:!0})],d.prototype,"midpointGraphics",void 0),v([m()],d.prototype,"midpointSymbol",void 0),v([m({readOnly:!0})],d.prototype,"selectedVertices",void 0),v([m()],d.prototype,"snappingManager",void 0),v([m({readOnly:!0})],d.prototype,"state",null),v([m({value:E})],d.prototype,"symbols",null),v([m({readOnly:!0})],d.prototype,"type",void 0),v([m()],d.prototype,"view",void 0),d=v([se(F)],d);const Se=d;export{Se as default};
