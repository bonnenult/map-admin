import{aW as a,aY as l}from"./vendor.70daa49e.js";import{o as m,e as d}from"./heatmapUtils.a8737117.js";import{n as h}from"./BitmapTileContainer.af6178be.js";import{o as p}from"./BaseTileRenderer.7d3aa8b4.js";import"./Bitmap.f5efb0a9.js";import"./brushes.00614641.js";import"./definitions.21e97413.js";import"./Utils.8da54d2f.js";import"./number.dfbabd3f.js";import"./programUtils.96aa856a.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.f8f54134.js";import"./pixelUtils.59d1e551.js";import"./TileContainer.26ab15fa.js";import"./WGLContainer.054d692c.js";import"./Container.879a33d6.js";import"./EffectView.39edae97.js";class c{constructor(){this.gradient=null,this.height=512,this.width=512}render(t){m(t,512,this.intensities,this.gradient,this.minPixelIntensity,this.maxPixelIntensity)}}let o=class extends p{constructor(e){super(e),this._intensityInfo={minPixelIntensity:0,maxPixelIntensity:0},this.featuresView={attributeView:{initialize:()=>{},requestUpdate:()=>{}},requestRender:()=>{}},this._container=new h(e.tileInfoView)}createTile(e){const t=this._container.createTile(e);return this.tileInfoView.getTileCoords(t.bitmap,e),t.bitmap.resolution=this.tileInfoView.getTileResolution(e),t}onConfigUpdate(){const e=this.layer.renderer;if(e.type==="heatmap"){const{minPixelIntensity:t,maxPixelIntensity:n}=e;this._intensityInfo.minPixelIntensity=t,this._intensityInfo.maxPixelIntensity=n,this._gradient=d(e.toJSON()),this.tiles.forEach(r=>{const i=r.bitmap.source;i&&(i.minPixelIntensity=t,i.maxPixelIntensity=n,i.gradient=this._gradient,r.bitmap.invalidateTexture())})}}hitTest(){return Promise.resolve([])}install(e){e.addChild(this._container)}uninstall(e){this._container.removeAllChildren(),e.removeChild(this._container)}disposeTile(e){this._container.removeChild(e),e.destroy()}supportsRenderer(e){return e&&e.type==="heatmap"}onTileData(e){const t=this.tiles.get(e.tileKey);if(!t)return;const n=e.intensityInfo,{minPixelIntensity:r,maxPixelIntensity:i}=this._intensityInfo,s=t.bitmap.source||new c;s.intensities=n&&n.matrix||null,s.minPixelIntensity=r,s.maxPixelIntensity=i,s.gradient=this._gradient,t.bitmap.source=s,this._container.addChild(t),this._container.requestRender(),this.requestUpdate()}onTileError(e){console.error(e)}lockGPUUploads(){}unlockGPUUploads(){}fetchResource(e,t){return console.error(e),Promise.reject()}};o=a([l("esri.views.2d.layers.features.tileRenderers.HeatmapTileRenderer")],o);const $=o;export{$ as default};
