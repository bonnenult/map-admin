import{X as f,bY as b,r as y,t as u,iW as m,cw as C,cy as x,cA as S,cC as $,bu as M,e as l,d as h,i as w,p as v,g as L,aA as j,a8 as A,bk as _,b3 as D,b8 as z,T as O}from"./index.a1c5dd56.js";import{p as T}from"./dataUtils.2acffd8f.js";import{b as W}from"./brushes.72191f86.js";import{I as F}from"./Utils.bc20347e.js";import{a as I}from"./WGLContainer.3b2fd5d0.js";class P extends I{constructor(){super(...arguments),this.flowStyle=null}get requiresDedicatedFBO(){return!1}doRender(e){super.doRender(e)}prepareRenderPasses(e){const t=e.registerRenderPass({name:"flow",brushes:[W],target:()=>this.children,drawPhase:F.MAP});return[...super.prepareRenderPasses(e),t]}}const q=f.getLogger("esri.views.2d.engine.flow.FlowDisplayData");class B{constructor(e,t,n,a){this.state={name:"created"},this.flowStyle=e,this.extent=t,this.size=n,this.pixelRatio=a}async load(){const e=new AbortController;this.state={name:"loading",abortController:e};const t=await this.flowStyle.loadResources({extent:this.extent,size:this.size,pixelRatio:this.pixelRatio},e.signal);this.state={name:"loaded",resources:t}}prepareForRendering(e,t,n){if(this.state.name!=="loaded")return void q.error("Only loaded resources can be attached.");const a=this.state.resources;a.prepareForRendering(e,t,n),this.state={name:"attached",resources:a}}destroy(){if(this.state.name==="loading")return this.state.abortController.abort(),void(this.state={name:"detached"});this.state.name==="attached"&&(this.state.resources.detach(),this.state={name:"detached"})}update(e){return this.flowStyle.areResourcesCompatible(e.flowStyle)?!(!this.extent.equals(e.extent)||this.size[0]!==e.size[0]||this.size[1]!==e.size[1]||this.pixelRatio!==e.pixelRatio)&&(this.flowStyle=e.flowStyle,!0):!1}}class V extends b{constructor(){super(...arguments),this._displayData=null}get displayData(){return this._displayData}set displayData(e){this._displayData=e,this.requestRender()}clear(){y(this._displayData)&&(this._displayData.destroy(),this._displayData=null,this.requestRender())}setTransform(e){const{displayData:t}=this;if(u(t))return;const n=t.extent.xmin,a=t.extent.ymax,o=[0,0];e.toScreen(o,[n,a]);const s=(t.extent.xmax-t.extent.xmin)/t.size[0]/e.resolution,d=m(e.rotation),{dvs:r}=this.transforms;C(r),x(r,r,[-1,1,0]),S(r,r,[2/(e.size[0]*e.pixelRatio),-2/(e.size[1]*e.pixelRatio),1]),x(r,r,[o[0],o[1],0]),$(r,r,d),S(r,r,[s*e.pixelRatio,s*e.pixelRatio,1])}_createTransforms(){return{dvs:M()}}}const U=1.15,k=f.getLogger("esri.views.2d.engine.flow.FlowStrategy");let p=class extends v{constructor(i){super(i),this._flowDisplayObject=new V,this._loading=null}initialize(){this.flowContainer.addChild(this._flowDisplayObject)}destroy(){this._clear(),this.flowContainer.removeAllChildren()}get updating(){return this._loading!=null}update(i){const{flowStyle:e}=this.flowContainer;if(u(e))return void this._clear();const{extent:t,rotation:n,resolution:a,pixelRatio:o}=i.state,s=G(t,n);s.expand(U);const d=[Math.round((s.xmax-s.xmin)/a),Math.round((s.ymax-s.ymin)/a)],r=new B(e,s,d,o);if(y(this._loading)){if(this._loading.update(r))return;this._loading.destroy(),this._loading=null}!u(this._flowDisplayObject.displayData)&&this._flowDisplayObject.displayData.update(r)||(r.load().then(()=>{this._flowDisplayObject.clear(),this._flowDisplayObject.displayData=this._loading,this._loading=null},g=>{L(g)||(k.error("A resource failed to load.",g),this._loading=null)}),this._loading=r)}_clear(){this._flowDisplayObject.clear(),y(this._loading)&&(this._loading.destroy(),this._loading=null)}};l([h()],p.prototype,"_loading",void 0),l([h()],p.prototype,"flowContainer",void 0),l([h()],p.prototype,"updating",null),p=l([w("esri.views.2d.engine.flow.FlowStrategy")],p);const E=p;function G(i,e){const t=new j({x:(i.xmax+i.xmin)/2,y:(i.ymax+i.ymin)/2,spatialReference:i.spatialReference}),n=i.xmax-i.xmin,a=i.ymax-i.ymin,o=Math.abs(Math.cos(m(e))),s=Math.abs(Math.sin(m(e))),d=o*n+s*a,r=s*n+o*a,g=new A({xmin:t.x-d/2,ymin:t.y-r/2,xmax:t.x+d/2,ymax:t.y+r/2,spatialReference:i.spatialReference});return g.centerAt(t),g}function X(i){const e=_(i.lineWidth),t=2*e,n=Math.round(_(i.lineLength)/t)+1,a=e,o=10,s=i.lineColor.toRgba(),d=[s[0]/255,s[1]/255,s[2]/255,s[3]],{lineSpeed:r,fadeDuration:g,density:R}=i;return{lineRenderWidth:e,segmentLength:t,verticesPerLine:n,lineCollisionWidth:a,lineSpacing:o,lineColor:d,lineSpeed:r,fadeDuration:g,density:R,smoothing:_(i.smoothing),velocityScale:1,minWeightThreshold:.001,minSpeedThreshold:.001,maxTurnAngle:1,mergeLines:!0,interpolate:!0,profile:!1}}class Y{constructor(e,t){this._vertexData=e,this._indexData=t}prepareForRendering(e,t,n){const a=D.createVertex(e,35044,this._vertexData),o=D.createIndex(e,35044,this._indexData),s=new z(e,t,n,{geometry:a},o);this.vertexBuffer=a,this.indexBuffer=o,this.vertexArray=s,this._vertexData=null,this._indexData=null}detach(){this.vertexArray.dispose(),this.vertexBuffer.dispose(),this.indexBuffer.dispose()}}class H{constructor(e,t,n){this._loadImagery=e,this._createStreamlinesMesh=t,this._rendererSettings=X(n)}get animated(){return this._rendererSettings.lineSpeed>0}get renderSettings(){return this._rendererSettings}areResourcesCompatible(e){let t=!0;return t=t&&e._loadImagery===this._loadImagery,t=t&&e._createStreamlinesMesh===this._createStreamlinesMesh,t=t&&e._rendererSettings.verticesPerLine===this._rendererSettings.verticesPerLine,t=t&&e._rendererSettings.segmentLength===this._rendererSettings.segmentLength,t=t&&e._rendererSettings.lineSpacing===this._rendererSettings.lineSpacing,t=t&&e._rendererSettings.density===this._rendererSettings.density,t=t&&e._rendererSettings.smoothing===this._rendererSettings.smoothing,t=t&&e._rendererSettings.velocityScale===this._rendererSettings.velocityScale,t=t&&e._rendererSettings.minWeightThreshold===this._rendererSettings.minWeightThreshold,t=t&&e._rendererSettings.minSpeedThreshold===this._rendererSettings.minSpeedThreshold,t=t&&e._rendererSettings.mergeLines===this._rendererSettings.mergeLines,t=t&&e._rendererSettings.interpolate===this._rendererSettings.interpolate,t&&this._rendererSettings.mergeLines&&(t=e._rendererSettings.lineCollisionWidth===this._rendererSettings.lineCollisionWidth),!!t}async loadResources(e,t){const{extent:n,size:a}=e;O(t);const o=await this._loadImagery(n,a[0],a[1],t),{vertexData:s,indexData:d}=await this._createStreamlinesMesh(this._rendererSettings,o,t);return new Y(s,d)}}let c=class extends v{constructor(){super(...arguments),this._loadImagery=(i,e,t,n)=>T(this.layer,i,e,t,n),this._createStreamlinesMesh=(i,e,t)=>this.layer.createStreamlinesMesh({flowData:e,rendererSettings:i},{signal:t}),this.container=null,this.layer=null,this.type="rasterAnimatedFlow",this.redrawOrRefetch=async()=>{this._rendererChanged()}}get updating(){return!this._strategy||this._strategy.updating}update(i){i.stationary?this._strategy.update(i):this.layerView.requestUpdate()}install(i){this.container=new P,i.addChild(this.container),this._strategy=new E({flowContainer:this.container}),this._rendererChanged()}uninstall(){this._strategy.destroy(),this.container.removeAllChildren(),this.container.remove()}moveEnd(){}async doRefresh(){}attach(){}_rendererChanged(){if(this.layer.renderer.type!=="animated-flow")return;const i=new H(this._loadImagery,this._createStreamlinesMesh,this.layer.renderer);this.container.flowStyle=i,this.layerView.requestUpdate()}};l([h()],c.prototype,"_strategy",void 0),l([h()],c.prototype,"container",void 0),l([h()],c.prototype,"layer",void 0),l([h()],c.prototype,"layerView",void 0),l([h()],c.prototype,"type",void 0),l([h()],c.prototype,"updating",null),c=l([w("esri.views.2d.engine.flow.AnimatedFlowView2D")],c);const ee=c;export{ee as p};
