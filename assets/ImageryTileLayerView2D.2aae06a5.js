import{dV as R,bu as _,aP as x,mD as A,X as S,e as h,d as c,i as w,im as W,el as $,mv as z,a8 as E,ck as M,mj as Q,mu as H,r as u,t as J,aI as N,aA as X,iB as Y,g as v,ap as C,bY as K,b3 as D,b8 as Z,dW as ee,cx as te,hr as se,q as T,h as ie,eg as re}from"./index.fe92decb.js";import{p as ae}from"./AnimatedFlowView2D.2e84a28f.js";import{l as le}from"./LayerView2D.7ca65bda.js";import{x as oe,j as ne,c as he}from"./brushes.54912a2b.js";import{I as P,n as ce}from"./Utils.b6ae6dd5.js";import{o as U}from"./TileContainer.78074cd9.js";import{u as ue,l as de}from"./pixelUtils.bd04c746.js";import{g as k,u as F,s as ye,i as me}from"./RawBlockCache.7b0b71af.js";import{F as pe}from"./rasterProjectionHelper.28e9f319.js";import{r as L}from"./util.103b8071.js";import{U as G,_ as B,S as ge}from"./dataUtils.bd0aa31d.js";import{m as fe}from"./ImageryTileLayerView.aaf419e5.js";import{i as be}from"./RefreshableLayerView.4c074742.js";import"./vendor.d9e807b5.js";import"./index.dbbecfd7.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./WGLContainer.8d1ee991.js";import"./Container.2f7d1138.js";import"./EffectView.873e2976.js";import"./number.dfbabd3f.js";import"./definitions.21e97413.js";import"./programUtils.bb88f8de.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.2ed20ae2.js";import"./popupUtils.16f9871e.js";class _e extends R{constructor(e,s,i,r,a,l=null){super(e,s,i,r,a),this.bitmap=new oe(l,null,null),this.bitmap.coordScale=[r,a],this.bitmap.once("isReady",()=>this.ready())}destroy(){super.destroy(),this.bitmap.destroy(),this.bitmap=null,this.stage=null}set stencilRef(e){this.bitmap.stencilRef=e}get stencilRef(){return this.bitmap.stencilRef}setTransform(e,s){super.setTransform(e,s),this.bitmap.transforms.dvs=this.transforms.dvs}_createTransforms(){return{dvs:_(),tileMat3:_()}}onAttach(){this.bitmap.stage=this.stage}onDetach(){this.bitmap.stage=null}}class we extends U{constructor(){super(...arguments),this.isCustomTilingScheme=!1}createTile(e){const s=this._getTileBounds(e),[i,r]=this._tileInfoView.tileInfo.size;return new _e(e,s[0],s[3],i,r)}destroyTile(){}prepareRenderPasses(e){const s=e.registerRenderPass({name:"imagery (tile)",brushes:[ne.raster],target:()=>this.children.map(i=>i.bitmap),drawPhase:P.MAP});return[...super.prepareRenderPasses(e),s]}doRender(e){this.visible&&e.drawPhase===P.MAP&&super.doRender(e)}_getTileBounds(e){const s=this._tileInfoView.getTileBounds(x(),e);if(this.isCustomTilingScheme&&e.world){const{tileInfo:i}=this._tileInfoView,r=A(i.spatialReference);if(r){const{resolution:a}=i.lodAt(e.level),l=r/a%i.size[0],o=l?(i.size[0]-l)*a:0;s[0]-=o*e.world,s[2]-=o*e.world}}return s}}const ve=[0,0],j=S.getLogger("esri.views.2d.layers.ImageryTileLayerView2D");let d=class extends W{constructor(){super(...arguments),this._emptyTilePixelBlock=null,this._tileStrategy=null,this._tileInfoView=null,this._fetchQueue=null,this._blockCacheRegistryUrl=null,this._blockCacheRegistryId=null,this._srcResolutions=null,this.previousLOD=null,this._needBlockCacheUpdate=!1,this._globalSymbolizerParams=null,this._symbolizerParams=null,this._abortController=null,this._isCustomTilingScheme=!1,this._globalUpdateRequested=!1,this.container=null,this.layer=null,this.redrawOrRefetch=$((t,e)=>!this.previousLOD||this.layerView.suspended?Promise.resolve():t?this.doRefresh():this._redrawImage(e))}get useWebGLForProcessing(){var t;return(t=this._get("useWebGLForProcessing"))==null||t}set useWebGLForProcessing(t){this._set("useWebGLForProcessing",t)}get useProgressiveUpdate(){return this._get("useProgressiveUpdate")==null||this._get("useProgressiveUpdate")}set useProgressiveUpdate(t){if(this._tileStrategy&&this.useProgressiveUpdate!==t){this._tileStrategy.destroy(),this.container.removeAllChildren();const e=this._getCacheSize(t);this._tileStrategy=new z({cachePolicy:"purge",acquireTile:s=>this.acquireTile(s),releaseTile:s=>this.releaseTile(s),cacheSize:e,tileInfoView:this._tileInfoView}),this._set("useProgressiveUpdate",t),this.layerView.requestUpdate()}}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume();const{extent:e,resolution:s,scale:i}=t.state,r=this._tileInfoView.getClosestInfoForScale(i);if(this.layer.raster){var a;if(!this.useProgressiveUpdate||this._needBlockCacheUpdate){const l=this._srcResolutions[r.level],o=e.toJSON?e:E.fromJSON(e);k(this._blockCacheRegistryUrl,this._blockCacheRegistryId,o,s,l,this.layer.raster.ioConfig.sampling)}this._needBlockCacheUpdate=!1,((a=this.previousLOD)==null?void 0:a.level)!==r.level&&(this.previousLOD=r,this._symbolizerParams==null||this.layerView.hasTilingEffects||this._updateSymbolizerParams(),this._tileStrategy.updateCacheSize(0))}}moveEnd(){!this.layerView.hasTilingEffects&&this.useProgressiveUpdate||(this._abortController&&this._abortController.abort(),this._abortController=new AbortController,this._fetchQueue.length===0&&this._redrawImage(this._abortController.signal).then(()=>{this._globalUpdateRequested=!1,this.layerView.requestUpdate()}));const t=this._getCacheSize(this.useProgressiveUpdate);this._tileStrategy.updateCacheSize(t),this.layerView.requestUpdate()}get updating(){return this._fetchQueue.length>0||this._globalUpdateRequested||!(!this.updatingHandles||!this.updatingHandles.updating)}attach(){M().supportsTextureFloat||(this.useWebGLForProcessing=!1),this._initializeTileInfo(),this._tileInfoView=new Q(this.layerView.tileInfo,this.layerView.fullExtent);const t=this._computeFetchConcurrency();this._fetchQueue=new H({tileInfoView:this._tileInfoView,concurrency:t,process:(s,i)=>this._fetchTile1(s,i)});const e=this._getCacheSize(this.useProgressiveUpdate);this._tileStrategy=new z({cachePolicy:"purge",acquireTile:s=>this.acquireTile(s),releaseTile:s=>this.releaseTile(s),cacheSize:e,tileInfoView:this._tileInfoView}),this._updateBlockCacheRegistry()}acquireTile(t){const e=this.container.createTile(t);return this._enqueueTileFetch(e),this.layerView.requestUpdate(),this._needBlockCacheUpdate=!0,this._globalUpdateRequested=this.layerView.hasTilingEffects||!this.useProgressiveUpdate,e}releaseTile(t){this._fetchQueue.abort(t.key.id),this.container.removeChild(t),t.once("detach",()=>{t.destroy(),this.layerView.requestUpdate()}),this.layerView.requestUpdate()}uninstall(){this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null,this.notifyChange("updating"),F(this._blockCacheRegistryUrl,this._blockCacheRegistryId)}createEmptyTilePixelBlock(t=null){const e=t==null||t.join(",")===this._tileInfoView.tileInfo.size.join(",");if(e&&u(this._emptyTilePixelBlock))return this._emptyTilePixelBlock;t=t||this._tileInfoView.tileInfo.size;const[s,i]=t,r=new ue({width:s,height:i,pixels:[new Uint8Array(s*i)],mask:new Uint8Array(s*i),pixelType:"u8"});return e&&(this._emptyTilePixelBlock=r),r}_fetchTile1(t,e){const s=!J(e)&&e.signal,i=this.canUseWebGLForProcessing(),r={allowPartialFill:!0,datumTransformation:this.layerView.datumTransformation,interpolation:i?"nearest":this.layer.interpolation,registryId:this._blockCacheRegistryId,requestRawData:i,signal:N(s),srcResolution:this._srcResolutions[t.level],timeExtent:this.layerView.timeExtent,tileInfo:this.layerView.tileInfo};return this.fetchTile(t,r)}_getCacheSize(t){return t?40:0}_initializeTileInfo(){const t=this.layerView.view.spatialReference,e=new X({x:this.layerView.fullExtent.xmin,y:this.layerView.fullExtent.ymax,spatialReference:t}),{scales:s,srcResolutions:i,isCustomTilingScheme:r}=pe(this.layer.rasterInfo,t),a=Y.create({spatialReference:t,size:512,scales:s});(a.origin.x===0||a.origin.x>e.x)&&(a.origin=e),this._isCustomTilingScheme=r,this.layerView.set("tileInfo",a),this._srcResolutions=i!=null?i:[]}_computeFetchConcurrency(){const{blockBoundary:t}=this.layer.rasterInfo.storageInfo,e=t[t.length-1];return(e.maxCol-e.minCol+1)*(e.maxRow-e.minRow+1)>64?2:10}async _enqueueTileFetch(t,e){if(!this._fetchQueue.has(t.key.id)){try{const s=await this._fetchQueue.push(t.key);this.notifyChange("updating");const{bandIds:i}=this.layer;let r=!this.useProgressiveUpdate||this.layerView.hasTilingEffects&&!this._globalSymbolizerParams;if(this._globalUpdateRequested&&!this.layerView.moving&&this._fetchQueue.length===0){r=!1;try{await this._redrawImage(this._abortController&&this._abortController.signal)}catch(o){v(o)&&j.error(o)}this._globalUpdateRequested=!1}!this.canUseWebGLForProcessing()&&this.type!=="rasterVF"||this.layerView.hasTilingEffects||this._symbolizerParams!=null||this._updateSymbolizerParams();const a=this._tileInfoView.getTileCoords(ve,t.key),l=this._tileInfoView.getTileResolution(t.key);await this.updateTileSource(t,{source:s,symbolizerParams:this._symbolizerParams,globalSymbolizerParams:this._globalSymbolizerParams,suspended:r,bandIds:i,coords:a,resolution:l}),t.once("attach",()=>this.layerView.requestUpdate()),this.container.addChild(t)}catch(s){v(s)||j.error(s)}this.layerView.requestUpdate()}}async _redrawImage(t){if(this.container.children.length===0)return;await this.updatingHandles.addPromise(this.layer.updateRenderer()),this.layerView.hasTilingEffects?await this._updateGlobalSymbolizerParams(t):(this._updateSymbolizerParams(),this._globalSymbolizerParams=null);const e=this.container.children.map(async s=>this.updateTileSymbolizerParameters(s,{local:this._symbolizerParams,global:this._globalSymbolizerParams}));await C(e),this.container.requestRender()}async _updateGlobalSymbolizerParams(t){const e={srcResolution:this._srcResolutions[this.previousLOD.level],registryId:this._blockCacheRegistryId,signal:t},s=await this.layer.fetchPixels(this.layerView.view.extent,this.layerView.view.width,this.layerView.view.height,e);if(!s||!s.pixelBlock)return;const i=this.layer.symbolizer.generateWebGLParameters({pixelBlock:de(s.pixelBlock,this.layer.bandIds),isGCS:this.layerView.view.spatialReference.isGeographic,resolution:{x:this.previousLOD.resolution,y:this.previousLOD.resolution},bandIds:this.layer.bandIds});!this.canUseWebGLForProcessing()&&i&&i.type==="stretch"&&this.layer.renderer&&this.layer.renderer.type==="raster-stretch"&&(i.factor=i.factor.map(r=>255*r),i.outMin=Math.round(255*i.outMin),i.outMax=Math.round(255*i.outMax)),this._globalSymbolizerParams=i}_updateSymbolizerParams(){this._symbolizerParams=this.layer.symbolizer.generateWebGLParameters({pixelBlock:null,isGCS:this.layerView.view.spatialReference.isGeographic,resolution:{x:this.previousLOD.resolution,y:this.previousLOD.resolution},bandIds:this.layer.bandIds})}_updateBlockCacheRegistry(t=!1){const{url:e,rasterInfo:s,raster:i}=this.layer,{multidimensionalDefinition:r}=this.layer.normalizeRasterFetchOptions({multidimensionalDefinition:this.layer.multidimensionalDefinition,timeExtent:this.layerView.timeExtent}),a=s!=null&&s.multidimensionalInfo?i.getSliceIndex(r):null,l=me(e,a);if(l!==this._blockCacheRegistryUrl){if(this._blockCacheRegistryUrl!=null&&F(this._blockCacheRegistryUrl,this._blockCacheRegistryId),this._blockCacheRegistryId=ye(l,this.layer.raster.rasterInfo),t){const o=this._tileInfoView.getClosestInfoForScale(this.layerView.view.scale),y=this._srcResolutions[o.level];k(l,this._blockCacheRegistryId,this.layerView.view.extent,this.layerView.view.resolution,y,this.layer.raster.ioConfig.sampling)}this._blockCacheRegistryUrl=l}}async doRefresh(){await this.updatingHandles.addPromise(this.layer.updateRenderer()),this.layerView.hasTilingEffects||this._updateSymbolizerParams(),this._updateBlockCacheRegistry(!0),this._fetchQueue.reset(),this.notifyChange("updating");const t=[];this._tileStrategy.tiles.forEach(e=>t.push(this._enqueueTileFetch(e))),await C(t)}};h([c()],d.prototype,"_globalUpdateRequested",void 0),h([c()],d.prototype,"container",void 0),h([c()],d.prototype,"layer",void 0),h([c()],d.prototype,"layerView",void 0),h([c()],d.prototype,"type",void 0),h([c()],d.prototype,"useWebGLForProcessing",null),h([c()],d.prototype,"useProgressiveUpdate",null),h([c()],d.prototype,"updating",null),d=h([w("esri.views.2d.layers.imagery.BaseImageryTileSubView2D")],d);let g=class extends d{constructor(){super(...arguments),this.container=null,this.layer=null,this.type="raster"}canUseWebGLForProcessing(){return this.useWebGLForProcessing&&this.layer.symbolizer.canRenderInWebGL&&!(this.layer.interpolation==="majority"&&L(this.layer))}fetchTile(t,e){return this.layer.fetchTile(t.level,t.row,t.col,e)}async updateTileSource(t,e){const{bandIds:s}=this.layer,i=this._getLayerInterpolation(),r=this.canUseWebGLForProcessing(),{source:a,symbolizerParams:l,globalSymbolizerParams:o,suspended:y,coords:V,resolution:m}=e,{bitmap:n}=t;if([n.x,n.y]=V,n.resolution=m,a&&u(a)&&u(a.pixelBlock)){const p={extent:a.extent,pixelBlock:a.pixelBlock};if(n.rawPixelData=p,r)n.source=a.pixelBlock,n.isRendereredSource=!1;else{const I=await this.layer.applyRenderer(p,(o==null?void 0:o.type)==="stretch"?o:null);n.source=I,n.isRendereredSource=!0}n.symbolizerParameters=r?l:null,r?n.transformGrid||(n.transformGrid=a.transformGrid):n.transformGrid=null}else{const p=this.createEmptyTilePixelBlock();n.source=p,n.symbolizerParameters=r?l:null,n.transformGrid=null}n.bandIds=r?s:null,n.width=this._tileInfoView.tileInfo.size[0],n.height=this._tileInfoView.tileInfo.size[1],n.interpolation=i,n.suspended=y,n.invalidateTexture()}async updateTileSymbolizerParameters(t,e){const{local:s,global:i}=e,{bandIds:r}=this.layer,a=this._getLayerInterpolation(),l=this.canUseWebGLForProcessing(),{bitmap:o}=t,{rawPixelData:y}=o;!l&&u(y)?(o.source=await this.layer.applyRenderer(y,(i==null?void 0:i.type)==="stretch"?i:null),o.isRendereredSource=!0):(o.isRendereredSource&&u(y)&&(o.source=y.pixelBlock),o.isRendereredSource=!1),o.symbolizerParameters=l?i||s:null,o.bandIds=l?r:null,o.interpolation=a,o.suspended=!1}install(t){this.container=new we(this._tileInfoView),this.container.isCustomTilingScheme=this._isCustomTilingScheme,t.addChild(this.container)}uninstall(){this.container.removeAllChildren(),this.container.remove(),super.uninstall()}_getLayerInterpolation(){const t=this.layer.renderer.type;if(t==="raster-colormap"||t==="unique-value"||t==="class-breaks")return"nearest";const{interpolation:e}=this.layer,{renderer:s}=this.layer;return s.type==="raster-stretch"&&s.colorRamp!=null?e==="bilinear"||e==="cubic"?"bilinear":"nearest":e}};h([c()],g.prototype,"container",void 0),h([c()],g.prototype,"layer",void 0),h([c()],g.prototype,"type",void 0),g=h([w("esri.views.2d.layers.imagery.ImageryTileView2D")],g);const Pe=g;class Ve extends K{constructor(e=null){super(),this._source=null,this._symbolizerParameters=null,this._vaoInvalidated=!0,this.coordScale=[1,1],this.height=null,this.stencilRef=0,this.rawPixelData=null,this.width=null,this.source=e}destroy(){var e,s;u(this.vaoData)&&((e=this.vaoData.magdir)==null||e.vao.dispose(),(s=this.vaoData.scalar)==null||s.vao.dispose(),this.vaoData=null)}get symbolizerParameters(){return this._symbolizerParameters}set symbolizerParameters(e){JSON.stringify(this._symbolizerParameters)!==JSON.stringify(e)&&(this._symbolizerParameters=e,this.invalidateVAO())}get source(){return this._source}set source(e){this._source=e,this.invalidateVAO()}invalidateVAO(){var e,s;!this._vaoInvalidated&&u(this.vaoData)&&((e=this.vaoData.magdir)==null||e.vao.dispose(),(s=this.vaoData.scalar)==null||s.vao.dispose(),this.vaoData=null,this._vaoInvalidated=!0,this.requestRender())}updateVectorFieldVAO(e){if(this._vaoInvalidated){if(this._vaoInvalidated=!1,u(this.source)&&!u(this.vaoData)){const{style:s}=this.symbolizerParameters;switch(s){case"beaufort_ft":case"beaufort_km":case"beaufort_kn":case"beaufort_m":case"beaufort_mi":case"classified_arrow":case"ocean_current_kn":case"ocean_current_m":case"single_arrow":{const i=G(this.source,this.symbolizerParameters),r=this._createVectorFieldVAO(e.context,i);this.vaoData={magdir:r}}break;case"simple_scalar":{const i=B(this.source,this.symbolizerParameters),r=this._createVectorFieldVAO(e.context,i);this.vaoData={scalar:r}}break;case"wind_speed":{const i=G(this.source,this.symbolizerParameters),r=this._createVectorFieldVAO(e.context,i),a=B(this.source,this.symbolizerParameters),l=this._createVectorFieldVAO(e.context,a);this.vaoData={magdir:r,scalar:l}}}}this.ready(),this.requestRender()}}_createTransforms(){return{dvs:_()}}onAttach(){this.invalidateVAO()}onDetach(){this.invalidateVAO()}_createVectorFieldVAO(e,s){const{vertexData:i,indexData:r}=s,a=D.createVertex(e,35044,new Float32Array(i)),l=D.createIndex(e,35044,new Uint32Array(r)),o=ce("vector-field",{geometry:[{location:0,name:"a_pos",count:2,type:5126,normalized:!1},{location:1,name:"a_offset",count:2,type:5126,normalized:!1},{location:2,name:"a_vv",count:2,type:5126,normalized:!1}]});return{vao:new Z(e,o.attributes,o.bufferLayouts,{geometry:a},l),elementCount:r.length}}}class Ie extends R{constructor(e,s,i,r,a,l=null){super(e,s,i,r,a),this.tileData=new Ve(l),this.tileData.coordScale=[r,a],this.tileData.once("isReady",()=>this.ready())}destroy(){super.destroy(),this.tileData.destroy(),this.tileData=null,this.stage=null}set stencilRef(e){this.tileData.stencilRef=e}get stencilRef(){return this.tileData.stencilRef}_createTransforms(){return{dvs:_(),tileMat3:_()}}setTransform(e,s){super.setTransform(e,s);const i=s/(e.resolution*e.pixelRatio),r=this.transforms.tileMat3,[a,l]=this.tileData.offset,o=[this.x+a*s,this.y-l*s],[y,V]=e.toScreenNoRotation([0,0],o),{symbolTileSize:m}=this.tileData.symbolizerParameters,n=Math.round((this.width-this.tileData.offset[0])/m)*m,p=Math.round((this.height-this.tileData.offset[1])/m)*m,I=n/this.rangeX*i,q=p/this.rangeY*i;ee(r,I,0,0,0,q,0,y,V,1),te(this.transforms.dvs,e.displayViewMat3,r),this.tileData.transforms.dvs=this.transforms.dvs}onAttach(){this.tileData.stage=this.stage}onDetach(){this.tileData.stage=null}}class Te extends U{constructor(){super(...arguments),this.isCustomTilingScheme=!1,this.symbolTypes=["triangle"]}createTile(e){const s=this._tileInfoView.getTileBounds(x(),e),[i,r]=this._tileInfoView.tileInfo.size;return new Ie(e,s[0],s[3],i,r)}destroyTile(){}prepareRenderPasses(e){const s=e.registerRenderPass({name:"imagery (vf tile)",brushes:[he],target:()=>this.children.map(i=>i.tileData),drawPhase:P.MAP});return[...super.prepareRenderPasses(e),s]}doRender(e){this.visible&&e.drawPhase===P.MAP&&this.symbolTypes.forEach(s=>{e.renderPass=s,super.doRender(e)})}}let f=class extends d{constructor(){super(...arguments),this._handle=null,this.container=null,this.layer=null,this.type="rasterVF"}canUseWebGLForProcessing(){return!1}async fetchTile(t,e){const s=await this.layer.fetchTile(t.level,t.row,t.col,e);return this.layer.rasterInfo.dataType==="vector-magdir"&&s!=null&&s.pixelBlock&&(s.pixelBlock=await this.layer.convertVectorFieldData(s.pixelBlock,e)),s}updateTileSource(t,e){const s=e.symbolizerParams,{tileData:i}=t;i.key=t.key,i.width=this._tileInfoView.tileInfo.size[0],i.height=this._tileInfoView.tileInfo.size[1];const{symbolTileSize:r}=s,{source:a}=e;if(i.offset=this._getTileSymbolOffset(i.key,r),u(a)&&u(a.pixelBlock)){const l={extent:a.extent,pixelBlock:a.pixelBlock};i.rawPixelData=l,i.source=this._sampleVectorFieldData(a.pixelBlock,s,i.offset),i.symbolizerParameters=s}else{const l=[Math.round((this._tileInfoView.tileInfo[0]-i.offset[0])/r),Math.round((this._tileInfoView.tileInfo[1]-i.offset[1])/r)],o=this.createEmptyTilePixelBlock(l);i.source=o,i.symbolizerParameters=s}return i.invalidateVAO(),Promise.resolve(null)}updateTileSymbolizerParameters(t,e){var s;const i=e.local,{symbolTileSize:r}=i,{tileData:a}=t;a.offset=this._getTileSymbolOffset(a.key,r);const l=a.symbolizerParameters.symbolTileSize;return a.symbolizerParameters=i,u((s=a.rawPixelData)==null?void 0:s.pixelBlock)&&l!==r&&(a.source=this._sampleVectorFieldData(a.rawPixelData.pixelBlock,a.symbolizerParameters,a.offset)),Promise.resolve(null)}install(t){this.container=new Te(this._tileInfoView),this.container.isCustomTilingScheme=this._isCustomTilingScheme,this._updateSymbolType(this.layer.renderer),this._handle=this.layer.watch("renderer",e=>this._updateSymbolType(e)),t.addChild(this.container)}uninstall(){this.container.removeAllChildren(),this._handle.remove(),this._handle=null,this.container.remove(),super.uninstall()}_getTileSymbolOffset(t,e){const s=t.col*this._tileInfoView.tileInfo.size[0]%e,i=t.row*this._tileInfoView.tileInfo.size[1]%e;return[s>e/2?e-s:-s,i>e/2?e-i:-i]}_sampleVectorFieldData(t,e,s){const{symbolTileSize:i}=e;return ge(t,"vector-uv",i,s)}_updateSymbolType(t){t.type==="vector-field"&&(this.container.symbolTypes=t.style==="wind-barb"?["scalar","triangle"]:t.style==="simple-scalar"?["scalar"]:["triangle"])}};h([c()],f.prototype,"container",void 0),h([c()],f.prototype,"layer",void 0),h([c()],f.prototype,"type",void 0),f=h([w("esri.views.2d.layers.imagery.VectorFieldTileView2D")],f);const Re=f,O=S.getLogger("esri.views.2d.layers.ImageryTileLayerView2D");let b=class extends fe(be(le(re))){constructor(){super(...arguments),this._useWebGLForProcessing=!0,this._useProgressiveUpdate=!0,this.subview=null}initialize(){const t=this.updateFullExtent();this.addResolvingPromise(t)}get useWebGLForProcessing(){return this._useWebGLForProcessing}set useWebGLForProcessing(t){this._useWebGLForProcessing=t,this.subview&&"useWebGLForProcessing"in this.subview&&(this.subview.useWebGLForProcessing=t)}get useProgressiveUpdate(){return this._useWebGLForProcessing}set useProgressiveUpdate(t){this._useProgressiveUpdate=t,this.subview&&"useProgressiveUpdate"in this.subview&&(this.subview.useProgressiveUpdate=t)}update(t){this.subview.update(t),this.notifyChange("updating")}isUpdating(){return!this.subview||this.subview.updating}attach(){this.layer.increaseRasterJobHandlerUsage(),this._updateSubview(),this.handles.add([se(this.layer,["bandIds","renderer","interpolation","multidimensionalDefinition"],(t,e,s)=>{const i=s==="multidimensionalDefinition",r=s==="interpolation"&&(t==="majority"||e==="majority")&&L(this.layer),a=s==="renderer"&&e.type!==t.type;a&&this._updateSubview();const l=i||r||a;this.subview.redrawOrRefetch(l).catch(o=>{v(o)||O.error(o)}),this.notifyChange("updating")}),T(this,["layer.blendMode"],t=>{this.subview&&(this.subview.container.blendMode=t)},!0),T(this,["layer.effect"],t=>{this.subview&&(this.subview.container.effect=t)},!0),T(this,"timeExtent",()=>{this.subview.redrawOrRefetch(!0).catch(t=>{v(t)||O.error(t)})})],"attach")}detach(){this.handles.remove("attach"),this.layer.decreaseRasterJobHandlerUsage(),this.subview.uninstall()}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.subview.moveEnd()}async hitTest(t,e){return[new ie({attributes:{},geometry:t.clone()})]}doRefresh(){return this.subview.doRefresh()}_updateSubview(){const t=this.layer.renderer.type==="vector-field"?"rasterVF":this.layer.renderer.type==="animated-flow"?"rasterAnimatedFlow":"raster";if(this.subview){if(this.subview.type===t)return;this.subview.uninstall()}const{layer:e}=this;let s;s=t==="rasterVF"?new Re({layer:e,layerView:this}):t==="rasterAnimatedFlow"?new ae({layer:e,layerView:this}):new Pe({layer:e,layerView:this}),"useWebGLForProcessing"in s&&(s.useWebGLForProcessing=this._useWebGLForProcessing),"useProgressiveUpdate"in s&&(s.useProgressiveUpdate=this._useProgressiveUpdate),"previousLOD"in s&&(s.previousLOD=this.subview&&"previousLOD"in this.subview&&this.subview.previousLOD),s.attach(),s.install(this.container),s.container.blendMode=e.blendMode,s.container.effect=e.effect,this.subview=s,this.requestUpdate()}};h([c()],b.prototype,"subview",void 0),h([c()],b.prototype,"useWebGLForProcessing",null),h([c()],b.prototype,"useProgressiveUpdate",null),b=h([w("esri.views.2d.layers.ImageryTileLayerView2D")],b);const et=b;export{et as default};
