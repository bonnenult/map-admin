import{aX as a,aZ as l}from"./vendor.c8f3cc8c.js";import{o as m,e as d}from"./heatmapUtils.4fd3ddd0.js";import{n as c}from"./BitmapTileContainer.c07920c9.js";import{o as h}from"./BaseTileRenderer.7d199700.js";import"./Bitmap.2b92a227.js";import"./brushes.97799122.js";import"./definitions.21e97413.js";import"./Utils.b2b84829.js";import"./number.dfbabd3f.js";import"./programUtils.d5889455.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.56ac52e4.js";import"./pixelUtils.c614fa0a.js";import"./TileContainer.b3c46ff1.js";import"./WGLContainer.465f24a3.js";import"./Container.98366c00.js";import"./EffectView.59df383f.js";class p{constructor(){this.gradient=null,this.height=512,this.width=512}render(e){m(e,512,this.intensities,this.gradient,this.minPixelIntensity,this.maxPixelIntensity)}}let o=class extends h{constructor(t){super(t),this._intensityInfo={minPixelIntensity:0,maxPixelIntensity:0},this.featuresView={attributeView:{initialize:()=>{},requestUpdate:()=>{}},requestRender:()=>{}},this._container=new c(t.tileInfoView)}createTile(t){const e=this._container.createTile(t);return this.tileInfoView.getTileCoords(e.bitmap,t),e.bitmap.resolution=this.tileInfoView.getTileResolution(t),e}onConfigUpdate(){const t=this.layer.renderer;if(t.type==="heatmap"){const{minPixelIntensity:e,maxPixelIntensity:n}=t;this._intensityInfo.minPixelIntensity=e,this._intensityInfo.maxPixelIntensity=n,this._gradient=d(t.toJSON()),this.tiles.forEach(r=>{const i=r.bitmap.source;i&&(i.minPixelIntensity=e,i.maxPixelIntensity=n,i.gradient=this._gradient,r.bitmap.invalidateTexture())})}}hitTest(){return Promise.resolve([])}install(t){t.addChild(this._container)}uninstall(t){this._container.removeAllChildren(),t.removeChild(this._container)}disposeTile(t){this._container.removeChild(t),t.destroy()}supportsRenderer(t){return t&&t.type==="heatmap"}onTileData(t){const e=this.tiles.get(t.tileKey);if(!e)return;const n=t.intensityInfo,{minPixelIntensity:r,maxPixelIntensity:i}=this._intensityInfo,s=e.bitmap.source||new p;s.intensities=n&&n.matrix||null,s.minPixelIntensity=r,s.maxPixelIntensity=i,s.gradient=this._gradient,e.bitmap.source=s,this._container.addChild(e),this._container.requestRender(),this.requestUpdate()}onTileError(t){console.error(t)}lockGPUUploads(){}unlockGPUUploads(){}fetchResource(t,e){return console.error(t),Promise.reject()}};o=a([l("esri.views.2d.layers.features.tileRenderers.HeatmapTileRenderer")],o);const $=o;export{$ as default};
