var p=Object.defineProperty,u=Object.defineProperties;var S=Object.getOwnPropertyDescriptors;var l=Object.getOwnPropertySymbols;var b=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable;var c=(s,e,t)=>e in s?p(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t,f=(s,e)=>{for(var t in e||(e={}))b.call(e,t)&&c(s,t,e[t]);if(l)for(var t of l(e))x.call(e,t)&&c(s,t,e[t]);return s},d=(s,e)=>u(s,S(e));import{r as n,a8 as m,mn as h}from"./index.fe92decb.js";import{u as a,s as y,v as N,y as O,B as J}from"./pixelUtils.bd04c746.js";import{P as j,N as v}from"./RasterSymbolizer.94b21005.js";import{x as P,d as g,L as z}from"./rasterProjectionHelper.28e9f319.js";import{f as B,c as w}from"./dataUtils.bd0aa31d.js";import{f as k}from"./utils.f0d21d34.js";import"./vendor.d9e807b5.js";import"./index.dbbecfd7.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./LercCodec.614318e7.js";import"./colorUtils.92e1b957.js";class C{convertVectorFieldData(e){const t=a.fromJSON(e.pixelBlock),r=B(t,e.type);return Promise.resolve(n(r)&&r.toJSON())}async decode(e){const t=await j(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=a.fromJSON(e.pixelBlock),e.extent=e.extent?m.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(n(t)&&t.toJSON())}async updateSymbolizer(e){var t;this.symbolizer=v.fromJSON(e.symbolizerJSON),e.histograms&&((t=this.symbolizer)==null?void 0:t.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(a.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(n(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=y(a.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=N(a.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((r,o)=>{t.set(o,r==null?void 0:r.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map(i=>i?new a(i):null),r=O(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo});if(!e.coefs)return r&&r.toJSON();const o=J(r,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return o&&o.toJSON()}async createStreamlinesMesh(e,t){const r={data:new Float32Array(e.flowData.buffer),width:e.flowData.width,height:e.flowData.height},{vertexData:o,indexData:i}=await w(e.rendererSettings,r,t.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:i.buffer},transferList:[o.buffer,i.buffer]}}async getProjectionOffsetGrid(e){const t=m.fromJSON(e.projectedExtent),r=m.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationStemps&&(o=new h({steps:e.datumTransformationStemps})),P(t.spatialReference,r.spatialReference,o)&&await g();const i=e.rasterTransform?k(e.rasterTransform):null;return z(d(f({},e),{projectedExtent:t,srcBufferExtent:r,datumTransformation:o,rasterTransform:i}))}}export{C as default};
