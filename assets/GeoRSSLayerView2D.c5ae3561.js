import{fX as y,bg as o,hw as f,bd as d,at as b,oe as g,eY as l,aX as j,aZ as w}from"./vendor.c8f3cc8c.js";import{l as u}from"./LayerView2D.25658a74.js";import{i as S}from"./GraphicContainer.02e1f23b.js";import{i as V}from"./BaseGraphicContainer.ed4b7b6a.js";import"./Container.98366c00.js";import"./EffectView.59df383f.js";import"./Utils.b2b84829.js";import"./number.dfbabd3f.js";import"./CIMSymbolHelper.05203bfb.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.dd7ec7e5.js";import"./projectionSupport.a9ad5f38.js";import"./json.2d0d6862.js";import"./FeatureContainer.f5fb900c.js";import"./visualVariablesUtils.98dff1e6.js";import"./visualVariablesUtils.9dcd3ad7.js";import"./TileContainer.b3c46ff1.js";import"./WGLContainer.465f24a3.js";import"./brushes.97799122.js";import"./programUtils.d5889455.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.56ac52e4.js";import"./pixelUtils.c614fa0a.js";import"./Matcher.b81ee078.js";import"./tileUtils.8432939a.js";import"./TileClipper.af441dba.js";import"./cimAnalyzer.ddfafba2.js";import"./cimSymbolUtils.441175f3.js";import"./schemaUtils.3bffe16f.js";import"./MD5.f9440c6b.js";import"./util.de314230.js";import"./ComputedAttributeStorage.8a8199a7.js";import"./FeatureSetReader.2ffb1ded.js";import"./centroid.d0af71ad.js";import"./GraphicsView.991cf1e8.js";let n=class extends u(y){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,t){if(!this.graphicsViews.length)return null;const p=this.graphicsViews.reverse().map(i=>i.hitTest(e));return(await Promise.all(p)).flat().filter((i,s)=>(i&&(i.popupTemplate=this._popupTemplates.get(this.graphicsViews[s]),i.layer=this.layer,i.sourceLayer=this.layer),!!i))}update(e){if(this.graphicsViews)for(const t of this.graphicsViews)t.processUpdate(e)}attach(){this.handles.add([o(this.layer,"featureCollections",e=>{this._clear();for(const{popupInfo:t,featureSet:p,layerDefinition:i}of e){const s=f.fromJSON(p),m=new d(s.features),h=i.drawingInfo,c=t?b.fromJSON(t):null,r=g(h.renderer),a=new V({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:m,renderer:r,container:new S(this.view.featuresTilingScheme)});this._graphicsViewMap[s.geometryType]=a,this._popupTemplates.set(a,c),s.geometryType!=="polygon"||this.layer.polygonSymbol?s.geometryType!=="polyline"||this.layer.lineSymbol?s.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=r.symbol):this.layer.lineSymbol=r.symbol:this.layer.polygonSymbol=r.symbol,this.graphicsViews.push(a),this.container.addChild(a.container)}}),o(this.layer,"polygonSymbol",e=>{this._graphicsViewMap.polygon.renderer=new l({symbol:e})}),o(this.layer,"lineSymbol",e=>{this._graphicsViewMap.polyline.renderer=new l({symbol:e})}),o(this.layer,"pointSymbol",e=>{this._graphicsViewMap.point.renderer=new l({symbol:e})})],"georsslayerview")}detach(){this.handles.remove("georsslayerview"),this._clear()}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}_clear(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};n=j([w("esri.views.2d.layers.GeoRSSLayerView2D")],n);const oe=n;export{oe as default};
