import{fY as y,bh as a,hx as d,be as b,at as f,of as g,eZ as l,aY as j,a_ as w}from"./vendor.47ccae81.js";import{l as u}from"./LayerView2D.867d4d61.js";import{i as S}from"./GraphicContainer.c526c2e7.js";import{i as V}from"./BaseGraphicContainer.b7a8e357.js";import"./Container.034dd5d7.js";import"./EffectView.fdd4aaf1.js";import"./Utils.30b0e1a1.js";import"./number.dfbabd3f.js";import"./CIMSymbolHelper.280cbd1b.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.eec123ce.js";import"./projectionSupport.f43af219.js";import"./json.2d0d6862.js";import"./FeatureContainer.f7905394.js";import"./visualVariablesUtils.169867fe.js";import"./visualVariablesUtils.2eeaf118.js";import"./TileContainer.b343a31f.js";import"./WGLContainer.22553251.js";import"./brushes.c1614039.js";import"./programUtils.780f0e0a.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.fbe0cf96.js";import"./pixelUtils.b67e8c28.js";import"./Matcher.4cb2e421.js";import"./tileUtils.19949ed1.js";import"./TileClipper.553919cf.js";import"./cimAnalyzer.c8eeedb3.js";import"./cimSymbolUtils.b4522afd.js";import"./schemaUtils.7b9d1644.js";import"./MD5.f9440c6b.js";import"./util.5b46dbb6.js";import"./ComputedAttributeStorage.a3dbe5bf.js";import"./FeatureSetReader.2bd24612.js";import"./centroid.db30e28e.js";import"./GraphicsView.b3d3600e.js";let n=class extends u(y){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,t){if(!this.graphicsViews.length)return null;const p=this.graphicsViews.reverse().map(i=>i.hitTest(e));return(await Promise.all(p)).flat().filter((i,s)=>(i&&(i.popupTemplate=this._popupTemplates.get(this.graphicsViews[s]),i.layer=this.layer,i.sourceLayer=this.layer),!!i))}update(e){if(this.graphicsViews)for(const t of this.graphicsViews)t.processUpdate(e)}attach(){this.handles.add([a(this.layer,"featureCollections",e=>{this._clear();for(const{popupInfo:t,featureSet:p,layerDefinition:i}of e){const s=d.fromJSON(p),m=new b(s.features),h=i.drawingInfo,c=t?f.fromJSON(t):null,r=g(h.renderer),o=new V({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:m,renderer:r,container:new S(this.view.featuresTilingScheme)});this._graphicsViewMap[s.geometryType]=o,this._popupTemplates.set(o,c),s.geometryType!=="polygon"||this.layer.polygonSymbol?s.geometryType!=="polyline"||this.layer.lineSymbol?s.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=r.symbol):this.layer.lineSymbol=r.symbol:this.layer.polygonSymbol=r.symbol,this.graphicsViews.push(o),this.container.addChild(o.container)}}),a(this.layer,"polygonSymbol",e=>{this._graphicsViewMap.polygon.renderer=new l({symbol:e})}),a(this.layer,"lineSymbol",e=>{this._graphicsViewMap.polyline.renderer=new l({symbol:e})}),a(this.layer,"pointSymbol",e=>{this._graphicsViewMap.point.renderer=new l({symbol:e})})],"georsslayerview")}detach(){this.handles.remove("georsslayerview"),this._clear()}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}_clear(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};n=j([w("esri.views.2d.layers.GeoRSSLayerView2D")],n);const ae=n;export{ae as default};
