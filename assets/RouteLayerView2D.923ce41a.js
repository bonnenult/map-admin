import{eg as a,u as o,t as p,e as c,i as m}from"./index.988b09cd.js";import{l}from"./LayerView2D.8eaa8439.js";import{i as n}from"./GraphicContainer.f5d6e760.js";import{i as h}from"./BaseGraphicContainer.c36cfb1f.js";import"./vendor.c6be4c00.js";import"./index.25aa0880.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./Container.b0eab594.js";import"./EffectView.8c4917f2.js";import"./Utils.56a5b8e8.js";import"./number.dfbabd3f.js";import"./CIMSymbolHelper.2f431254.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.76485664.js";import"./projectionSupport.0aea5e60.js";import"./json.2d0d6862.js";import"./FeatureContainer.840ef524.js";import"./visualVariablesUtils.2eb282ca.js";import"./visualVariablesUtils.08738833.js";import"./TileContainer.d9e05cad.js";import"./WGLContainer.c4152aca.js";import"./brushes.0945eb3a.js";import"./programUtils.cffd2d5b.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.d5a4d0f6.js";import"./pixelUtils.5acf42e1.js";import"./Matcher.a5267c34.js";import"./tileUtils.78233d4a.js";import"./TileClipper.1bed009a.js";import"./cimAnalyzer.644bcc6c.js";import"./cimSymbolUtils.d7ac92e9.js";import"./schemaUtils.2a5bddac.js";import"./MD5.f9440c6b.js";import"./util.c823b0c8.js";import"./ComputedAttributeStorage.38434ee7.js";import"./FeatureSetReader.c688f927.js";import"./centroid.0322b186.js";import"./GraphicsView.de7a8100.js";let s=class extends l(a){constructor(){super(...arguments),this._handles=new o,this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,i){return this.graphicsViews.length?(await Promise.all(this.graphicsViews.map(t=>t.hitTest(e)))).flat().filter((t,r)=>(t&&(t.popupTemplate=this._popupTemplates.get(this.graphicsViews[r]),t.layer=this.layer,t.sourceLayer=this.layer),!!t)):null}update(e){if(this.graphicsViews)for(const i of this.graphicsViews)i.processUpdate(e)}attach(){p(this.layer.featureCollections)||this.layer.featureCollections.forEach(e=>{const i=new h({view:this.view,graphics:e.source,requestUpdateCallback:()=>this.requestUpdate(),container:new n(this.view.featuresTilingScheme)});i.renderer=e.renderer,this._popupTemplates.set(i,e.popupTemplate),this.graphicsViews.push(i),this.container.addChild(i.container)})}detach(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this.graphicsViews.length=0,this._handles.removeAll(),this._popupTemplates=null}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}};s=c([m("esri.views.2d.layers.RouteLayerView2D")],s);const ie=s;export{ie as default};
