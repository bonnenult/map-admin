import{eg as y,q as a,fS as d,n as f,fg as g,mB as j,dg as l,e as b,i as w}from"./index.a1c5dd56.js";import{l as u}from"./LayerView2D.762cd08a.js";import{i as S}from"./GraphicContainer.cebc4384.js";import{i as V}from"./BaseGraphicContainer.dc053f97.js";import"./vendor.c6be4c00.js";import"./index.a0863940.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./Container.d3a75275.js";import"./EffectView.1278bb79.js";import"./Utils.bc20347e.js";import"./number.dfbabd3f.js";import"./CIMSymbolHelper.a880d9c5.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.54c6d14c.js";import"./projectionSupport.716154a1.js";import"./json.2d0d6862.js";import"./FeatureContainer.ae27f4fa.js";import"./visualVariablesUtils.00eee3c8.js";import"./visualVariablesUtils.62bbedda.js";import"./TileContainer.ffa9f91c.js";import"./WGLContainer.3b2fd5d0.js";import"./brushes.72191f86.js";import"./programUtils.44a18329.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.89cee420.js";import"./pixelUtils.41f8268c.js";import"./Matcher.0c336864.js";import"./tileUtils.6f484de6.js";import"./TileClipper.8394d032.js";import"./cimAnalyzer.c15d2222.js";import"./cimSymbolUtils.810b9a82.js";import"./schemaUtils.25709676.js";import"./MD5.f9440c6b.js";import"./util.550c9a76.js";import"./ComputedAttributeStorage.cb18b4e6.js";import"./FeatureSetReader.75efbc58.js";import"./centroid.89738b03.js";import"./GraphicsView.b45c3d3c.js";let m=class extends u(y){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,t){if(!this.graphicsViews.length)return null;const p=this.graphicsViews.reverse().map(i=>i.hitTest(e));return(await Promise.all(p)).flat().filter((i,s)=>(i&&(i.popupTemplate=this._popupTemplates.get(this.graphicsViews[s]),i.layer=this.layer,i.sourceLayer=this.layer),!!i))}update(e){if(this.graphicsViews)for(const t of this.graphicsViews)t.processUpdate(e)}attach(){this.handles.add([a(this.layer,"featureCollections",e=>{this._clear();for(const{popupInfo:t,featureSet:p,layerDefinition:i}of e){const s=d.fromJSON(p),n=new f(s.features),c=i.drawingInfo,h=t?g.fromJSON(t):null,r=j(c.renderer),o=new V({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:n,renderer:r,container:new S(this.view.featuresTilingScheme)});this._graphicsViewMap[s.geometryType]=o,this._popupTemplates.set(o,h),s.geometryType!=="polygon"||this.layer.polygonSymbol?s.geometryType!=="polyline"||this.layer.lineSymbol?s.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=r.symbol):this.layer.lineSymbol=r.symbol:this.layer.polygonSymbol=r.symbol,this.graphicsViews.push(o),this.container.addChild(o.container)}}),a(this.layer,"polygonSymbol",e=>{this._graphicsViewMap.polygon.renderer=new l({symbol:e})}),a(this.layer,"lineSymbol",e=>{this._graphicsViewMap.polyline.renderer=new l({symbol:e})}),a(this.layer,"pointSymbol",e=>{this._graphicsViewMap.point.renderer=new l({symbol:e})})],"georsslayerview")}detach(){this.handles.remove("georsslayerview"),this._clear()}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}_clear(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};m=b([w("esri.views.2d.layers.GeoRSSLayerView2D")],m);const ce=m;export{ce as default};
