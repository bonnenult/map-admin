import{fW as f,a$ as p,ar as u,bc as g,bf as n,cx as w,b4 as y,aW as j,aY as b}from"./vendor.70daa49e.js";import{l as V}from"./LayerView2D.291c660d.js";import{i as l}from"./GraphicContainer.028dd6e2.js";import{i as d}from"./BaseGraphicContainer.ad159856.js";import"./Container.879a33d6.js";import"./EffectView.39edae97.js";import"./Utils.8da54d2f.js";import"./number.dfbabd3f.js";import"./CIMSymbolHelper.8e5a45e2.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.d0259d5c.js";import"./projectionSupport.850c9ce4.js";import"./json.2d0d6862.js";import"./FeatureContainer.86bb1943.js";import"./visualVariablesUtils.16bece63.js";import"./visualVariablesUtils.e3b233f7.js";import"./TileContainer.26ab15fa.js";import"./WGLContainer.054d692c.js";import"./brushes.00614641.js";import"./programUtils.96aa856a.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.f8f54134.js";import"./pixelUtils.59d1e551.js";import"./Matcher.9dc20079.js";import"./tileUtils.3ef9ae84.js";import"./TileClipper.96955a5e.js";import"./cimAnalyzer.f8c59bac.js";import"./cimSymbolUtils.f85d4916.js";import"./schemaUtils.953db095.js";import"./MD5.f9440c6b.js";import"./util.7ad95d3e.js";import"./ComputedAttributeStorage.9152a833.js";import"./FeatureSetReader.cfa1b3ff.js";import"./centroid.76062f7d.js";import"./GraphicsView.fb49caf7.js";const m="sublayers",h="layerView",C=Object.freeze({remove(){},pause(){},resume(){}});let c=class extends V(f){async fetchPopupFeatures(e){return Array.from(this.graphicsViews(),s=>s.hitTest(e).filter(i=>!!i.popupTemplate)).flat()}*graphicsViews(){p(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():p(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(e,s){const i=Array.from(this.graphicsViews(),async r=>{const a=await r.hitTest(e);if(p(this._graphicsViewsFeatureCollectionMap)){const t=this._graphicsViewsFeatureCollectionMap.get(r);for(const o of a)!o.popupTemplate&&t.popupTemplate&&(o.popupTemplate=t.popupTemplate)}return a});return(await Promise.all(i)).flat()}highlight(e){let s;if(typeof e=="number"?s=[e]:e instanceof u?s=[e.uid]:Array.isArray(e)&&e.length>0?s=typeof e[0]=="number"?e:e.map(i=>i&&i.uid):g.isCollection(e)&&(s=e.map(i=>i&&i.uid).toArray()),s=s.filter(i=>i!=null),!s.length)return C;for(const i of this.graphicsViews())i.addHighlight(s);return{remove:()=>{for(const i of this.graphicsViews())i.removeHighlight(s)}}}update(e){for(const s of this.graphicsViews())s.processUpdate(e)}attach(){const e=this.view,s=()=>this.requestUpdate(),i=this.layer.featureCollections;if(p(i)&&i.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const r of i){const a=new l(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const t=new d({view:e,graphics:r.source,renderer:r.renderer,requestUpdateCallback:s,container:a});this._graphicsViewsFeatureCollectionMap.set(t,r),this.container.addChild(t.container),this.handles.add([n(r,"visible",o=>t.container.visible=o),n(t,"updating",()=>this.notifyChange("updating"))],h)}}else p(this.layer.sublayers)&&this.handles.add(w(this.layer,"sublayers","change",()=>this._createGraphicsViews(),()=>this._createGraphicsViews(),()=>this._destroyGraphicsViews()),m)}detach(){this._destroyGraphicsViews(),this.handles.remove(m)}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews())e.viewChange()}isUpdating(){for(const e of this.graphicsViews())if(e.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(h);for(const e of this.graphicsViews())e.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),y(this.layer.sublayers))return;const e=[],s=this.view,i=()=>this.requestUpdate();for(const r of this.layer.sublayers){const a=new l(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const t=new d({view:s,graphics:r.graphics,requestUpdateCallback:i,container:a});this.handles.add([r.on("graphic-update",t.graphicUpdateHandler),n(r,"visible",o=>t.container.visible=o),n(t,"updating",()=>this.notifyChange("updating"))],h),this.container.addChild(t.container),e.push(t)}this._graphicsViews=e}};c=j([b("esri.views.2d.layers.MapNotesLayerView2D")],c);const oe=c;export{oe as default};
