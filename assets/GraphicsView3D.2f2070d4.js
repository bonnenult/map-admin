import{p as a,r as p,e,d as t,i as h}from"./index.988b09cd.js";import{E as c}from"./Graphics3DGraphicLikeLayerView.955a67bc.js";import{t as o}from"./GraphicsView.de7a8100.js";import"./vendor.c6be4c00.js";import"./index.25aa0880.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./Graphics3DScaleVisibility.c198a3d2.js";import"./rendererConversion.5da3920a.js";import"./optimizedFeatureQueryEngineAdapter.9e9e115c.js";import"./centroid.0322b186.js";import"./PooledRBush.2b6c8939.js";import"./Graphics3DObjectStates.fd1455f9.js";let r=class extends o(a){constructor(i){super(i),this.graphics3d=null,this.slicePlaneEnabled=!1,this.drapeSourceType=1}initialize(){const i="__sceneView.graphics-"+Date.now().toString(16),s={id:i,uid:i};this._set("graphics3d",new c({owner:this,layer:s})),this.graphics3d.setup()}destroy(){this.graphics3d&&(this.graphics3d.destroy(),this._set("graphics3d",null))}get updating(){var i;return!((i=this.graphics3d)==null||!i.updating)}notifyGraphicGeometryChanged(i){this.graphics3d.graphicsCore.notifyGraphicGeometryChanged(i)}notifyGraphicVisibilityChanged(i){this.graphics3d.graphicsCore.notifyGraphicVisibilityChanged(i)}get graphics3DGraphics(){return this.graphics3d.graphicsCore.graphics3DGraphics}get graphics3DGraphicsByObjectID(){return this.graphics3d.graphicsCore.graphics3DGraphicsByObjectID}get symbolUpdateType(){return this.graphics3d.graphicsCore.symbolUpdateType}getGraphicFromGraphicUid(i){return this.graphics3d.getGraphicFromGraphicUid(i)}whenGraphicBounds(i,s){return this.graphics3d.whenGraphicBounds(i,s)}graphicChanged(i){this.graphics3d.graphicsCore.graphicUpdateHandler(i)}get updatePolicy(){return this.graphics3d.graphicsCore.effectiveUpdatePolicy}queryGraphics(){return Promise.resolve(this.loadedGraphics)}async fetchPopupFeatures(i,s){return p(s)?s.clientGraphics:null}highlight(i){return this.graphics3d.highlight(i)}maskOccludee(i){return this.graphics3d.maskOccludee(i)}};e([t({readOnly:!0,aliasOf:"view.graphics"})],r.prototype,"graphics",void 0),e([t({aliasOf:"graphics"})],r.prototype,"loadedGraphics",void 0),e([t({readOnly:!0})],r.prototype,"updating",null),e([t({constructOnly:!0})],r.prototype,"view",void 0),e([t()],r.prototype,"graphics3d",void 0),e([t({type:Boolean})],r.prototype,"slicePlaneEnabled",void 0),r=e([h("esri.views.3d.layers.GraphicsView3D")],r);const D=r;export{D as default};
