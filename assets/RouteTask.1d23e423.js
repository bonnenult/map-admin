var $=Object.defineProperty,k=Object.defineProperties;var v=Object.getOwnPropertyDescriptors;var b=Object.getOwnPropertySymbols;var w=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable;var y=(r,e,t)=>e in r?$(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,p=(r,e)=>{for(var t in e||(e={}))w.call(e,t)&&y(r,t,e[t]);if(b)for(var t of b(e))x.call(e,t)&&y(r,t,e[t]);return r},f=(r,e)=>k(r,v(e));import{kz as N,gA as R,bb as S,e as q,i as P,kA as T}from"./index.988b09cd.js";import{u as c,d as M,b as z,p as C,f as E,o as G}from"./networkService.216d80a7.js";import"./vendor.c6be4c00.js";import"./index.25aa0880.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./GPMessage.07f07255.js";const K=G({accumulateAttributes:{name:"accumulateAttributeNames"},attributeParameterValues:!0,directionsTimeAttribute:{name:"directionsTimeAttributeName"},impedanceAttribute:{name:"impedanceAttributeName"},outSpatialReference:{name:"outSR",getter:r=>r.outSpatialReference.wkid},pointBarriers:{name:"barriers"},polylineBarriers:!0,polygonBarriers:!0,restrictionAttributes:{name:"restrictionAttributeNames"},stops:!0,travelMode:!0});async function Q(r,e,t){const m=[],i=[],a={},o={},l=N(r),{path:n}=l;e.stops&&e.stops.features&&c(e.stops.features,i,"stops.features",a),e.pointBarriers&&e.pointBarriers.features&&c(e.pointBarriers.features,i,"pointBarriers.features",a),e.polylineBarriers&&e.polylineBarriers.features&&c(e.polylineBarriers.features,i,"polylineBarriers.features",a),e.polygonBarriers&&e.polygonBarriers.features&&c(e.polygonBarriers.features,i,"polygonBarriers.features",a);const B=await R(i);for(const s in a){const u=a[s];m.push(s),o[s]=B.slice(u[0],u[1])}if(M(o,m)){let s=null;try{s=await z(n,e.apiKey,t)}catch{}s&&!s.hasZ&&C(o,m)}for(const s in o)o[s].forEach((u,h)=>{e.get(s)[h].geometry=u});const g=f(p({},t),{query:f(p(p({},l.query),K.toQueryParams(e)),{f:"json"})}),A=n.endsWith("/solve")?n:`${n}/solve`,j=await S(A,g);return E(j)}let d=class extends T{constructor(r){super(r)}solve(r,e){return Q(this.url,r,e)}};d=q([P("esri.tasks.RouteTask")],d);const O=d;export{O as default};
