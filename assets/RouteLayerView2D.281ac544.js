import{eg as a,u as o,t as p,e as c,i as m}from"./index.a1c5dd56.js";import{l}from"./LayerView2D.762cd08a.js";import{i as n}from"./GraphicContainer.cebc4384.js";import{i as h}from"./BaseGraphicContainer.dc053f97.js";import"./vendor.c6be4c00.js";import"./index.a0863940.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./Container.d3a75275.js";import"./EffectView.1278bb79.js";import"./Utils.bc20347e.js";import"./number.dfbabd3f.js";import"./CIMSymbolHelper.a880d9c5.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.54c6d14c.js";import"./projectionSupport.716154a1.js";import"./json.2d0d6862.js";import"./FeatureContainer.ae27f4fa.js";import"./visualVariablesUtils.00eee3c8.js";import"./visualVariablesUtils.62bbedda.js";import"./TileContainer.ffa9f91c.js";import"./WGLContainer.3b2fd5d0.js";import"./brushes.72191f86.js";import"./programUtils.44a18329.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.89cee420.js";import"./pixelUtils.41f8268c.js";import"./Matcher.0c336864.js";import"./tileUtils.6f484de6.js";import"./TileClipper.8394d032.js";import"./cimAnalyzer.c15d2222.js";import"./cimSymbolUtils.810b9a82.js";import"./schemaUtils.25709676.js";import"./MD5.f9440c6b.js";import"./util.550c9a76.js";import"./ComputedAttributeStorage.cb18b4e6.js";import"./FeatureSetReader.75efbc58.js";import"./centroid.89738b03.js";import"./GraphicsView.b45c3d3c.js";let s=class extends l(a){constructor(){super(...arguments),this._handles=new o,this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,i){return this.graphicsViews.length?(await Promise.all(this.graphicsViews.map(t=>t.hitTest(e)))).flat().filter((t,r)=>(t&&(t.popupTemplate=this._popupTemplates.get(this.graphicsViews[r]),t.layer=this.layer,t.sourceLayer=this.layer),!!t)):null}update(e){if(this.graphicsViews)for(const i of this.graphicsViews)i.processUpdate(e)}attach(){p(this.layer.featureCollections)||this.layer.featureCollections.forEach(e=>{const i=new h({view:this.view,graphics:e.source,requestUpdateCallback:()=>this.requestUpdate(),container:new n(this.view.featuresTilingScheme)});i.renderer=e.renderer,this._popupTemplates.set(i,e.popupTemplate),this.graphicsViews.push(i),this.container.addChild(i.container)})}detach(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this.graphicsViews.length=0,this._handles.removeAll(),this._popupTemplates=null}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}};s=c([m("esri.views.2d.layers.RouteLayerView2D")],s);const ie=s;export{ie as default};
