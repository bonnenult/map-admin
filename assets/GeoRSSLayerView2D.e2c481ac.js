import{eg as d,q as a,fS as y,n as f,fg as b,mB as g,dg as l,e as j,i as w}from"./index.fe92decb.js";import{l as u}from"./LayerView2D.7ca65bda.js";import{i as S}from"./GraphicContainer.1733e138.js";import{i as V}from"./BaseGraphicContainer.67656288.js";import"./vendor.d9e807b5.js";import"./index.dbbecfd7.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./Container.2f7d1138.js";import"./EffectView.873e2976.js";import"./Utils.b6ae6dd5.js";import"./number.dfbabd3f.js";import"./CIMSymbolHelper.0a12f9a9.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.503cfc44.js";import"./projectionSupport.18cf131f.js";import"./json.2d0d6862.js";import"./FeatureContainer.8f6f9a19.js";import"./visualVariablesUtils.57af9670.js";import"./visualVariablesUtils.2043fc08.js";import"./TileContainer.78074cd9.js";import"./WGLContainer.8d1ee991.js";import"./brushes.54912a2b.js";import"./programUtils.bb88f8de.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.2ed20ae2.js";import"./pixelUtils.bd04c746.js";import"./Matcher.4b214574.js";import"./tileUtils.6a16d9da.js";import"./TileClipper.34d95dd2.js";import"./cimAnalyzer.da7b7ced.js";import"./cimSymbolUtils.d6efc770.js";import"./schemaUtils.52b6278f.js";import"./MD5.f9440c6b.js";import"./util.103b8071.js";import"./ComputedAttributeStorage.4b3ca333.js";import"./FeatureSetReader.2f3c5dca.js";import"./centroid.4f152857.js";import"./GraphicsView.390bb3e3.js";let m=class extends u(d){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,t){if(!this.graphicsViews.length)return null;const p=this.graphicsViews.reverse().map(i=>i.hitTest(e));return(await Promise.all(p)).flat().filter((i,s)=>(i&&(i.popupTemplate=this._popupTemplates.get(this.graphicsViews[s]),i.layer=this.layer,i.sourceLayer=this.layer),!!i))}update(e){if(this.graphicsViews)for(const t of this.graphicsViews)t.processUpdate(e)}attach(){this.handles.add([a(this.layer,"featureCollections",e=>{this._clear();for(const{popupInfo:t,featureSet:p,layerDefinition:i}of e){const s=y.fromJSON(p),n=new f(s.features),h=i.drawingInfo,c=t?b.fromJSON(t):null,r=g(h.renderer),o=new V({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:n,renderer:r,container:new S(this.view.featuresTilingScheme)});this._graphicsViewMap[s.geometryType]=o,this._popupTemplates.set(o,c),s.geometryType!=="polygon"||this.layer.polygonSymbol?s.geometryType!=="polyline"||this.layer.lineSymbol?s.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=r.symbol):this.layer.lineSymbol=r.symbol:this.layer.polygonSymbol=r.symbol,this.graphicsViews.push(o),this.container.addChild(o.container)}}),a(this.layer,"polygonSymbol",e=>{this._graphicsViewMap.polygon.renderer=new l({symbol:e})}),a(this.layer,"lineSymbol",e=>{this._graphicsViewMap.polyline.renderer=new l({symbol:e})}),a(this.layer,"pointSymbol",e=>{this._graphicsViewMap.point.renderer=new l({symbol:e})})],"georsslayerview")}detach(){this.handles.remove("georsslayerview"),this._clear()}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}_clear(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};m=j([w("esri.views.2d.layers.GeoRSSLayerView2D")],m);const he=m;export{he as default};
