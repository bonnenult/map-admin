import{eg as y,q as a,fS as d,n as f,fg as g,mB as j,dg as l,e as b,i as w}from"./index.988b09cd.js";import{l as u}from"./LayerView2D.8eaa8439.js";import{i as S}from"./GraphicContainer.f5d6e760.js";import{i as V}from"./BaseGraphicContainer.c36cfb1f.js";import"./vendor.c6be4c00.js";import"./index.25aa0880.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./Container.b0eab594.js";import"./EffectView.8c4917f2.js";import"./Utils.56a5b8e8.js";import"./number.dfbabd3f.js";import"./CIMSymbolHelper.2f431254.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.76485664.js";import"./projectionSupport.0aea5e60.js";import"./json.2d0d6862.js";import"./FeatureContainer.840ef524.js";import"./visualVariablesUtils.2eb282ca.js";import"./visualVariablesUtils.08738833.js";import"./TileContainer.d9e05cad.js";import"./WGLContainer.c4152aca.js";import"./brushes.0945eb3a.js";import"./programUtils.cffd2d5b.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.d5a4d0f6.js";import"./pixelUtils.5acf42e1.js";import"./Matcher.a5267c34.js";import"./tileUtils.78233d4a.js";import"./TileClipper.1bed009a.js";import"./cimAnalyzer.644bcc6c.js";import"./cimSymbolUtils.d7ac92e9.js";import"./schemaUtils.2a5bddac.js";import"./MD5.f9440c6b.js";import"./util.c823b0c8.js";import"./ComputedAttributeStorage.38434ee7.js";import"./FeatureSetReader.c688f927.js";import"./centroid.0322b186.js";import"./GraphicsView.de7a8100.js";let m=class extends u(y){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,t){if(!this.graphicsViews.length)return null;const p=this.graphicsViews.reverse().map(i=>i.hitTest(e));return(await Promise.all(p)).flat().filter((i,s)=>(i&&(i.popupTemplate=this._popupTemplates.get(this.graphicsViews[s]),i.layer=this.layer,i.sourceLayer=this.layer),!!i))}update(e){if(this.graphicsViews)for(const t of this.graphicsViews)t.processUpdate(e)}attach(){this.handles.add([a(this.layer,"featureCollections",e=>{this._clear();for(const{popupInfo:t,featureSet:p,layerDefinition:i}of e){const s=d.fromJSON(p),n=new f(s.features),c=i.drawingInfo,h=t?g.fromJSON(t):null,r=j(c.renderer),o=new V({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:n,renderer:r,container:new S(this.view.featuresTilingScheme)});this._graphicsViewMap[s.geometryType]=o,this._popupTemplates.set(o,h),s.geometryType!=="polygon"||this.layer.polygonSymbol?s.geometryType!=="polyline"||this.layer.lineSymbol?s.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=r.symbol):this.layer.lineSymbol=r.symbol:this.layer.polygonSymbol=r.symbol,this.graphicsViews.push(o),this.container.addChild(o.container)}}),a(this.layer,"polygonSymbol",e=>{this._graphicsViewMap.polygon.renderer=new l({symbol:e})}),a(this.layer,"lineSymbol",e=>{this._graphicsViewMap.polyline.renderer=new l({symbol:e})}),a(this.layer,"pointSymbol",e=>{this._graphicsViewMap.point.renderer=new l({symbol:e})})],"georsslayerview")}detach(){this.handles.remove("georsslayerview"),this._clear()}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}_clear(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};m=b([w("esri.views.2d.layers.GeoRSSLayerView2D")],m);const ce=m;export{ce as default};
