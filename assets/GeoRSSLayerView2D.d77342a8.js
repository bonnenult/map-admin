import{fW as y,bf as o,hv as d,bc as f,as as g,od as j,eX as l,aW as b,aY as w}from"./vendor.70daa49e.js";import{l as u}from"./LayerView2D.291c660d.js";import{i as S}from"./GraphicContainer.028dd6e2.js";import{i as V}from"./BaseGraphicContainer.ad159856.js";import"./Container.879a33d6.js";import"./EffectView.39edae97.js";import"./Utils.8da54d2f.js";import"./number.dfbabd3f.js";import"./CIMSymbolHelper.8e5a45e2.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.d0259d5c.js";import"./projectionSupport.850c9ce4.js";import"./json.2d0d6862.js";import"./FeatureContainer.86bb1943.js";import"./visualVariablesUtils.16bece63.js";import"./visualVariablesUtils.e3b233f7.js";import"./TileContainer.26ab15fa.js";import"./WGLContainer.054d692c.js";import"./brushes.00614641.js";import"./programUtils.96aa856a.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.f8f54134.js";import"./pixelUtils.59d1e551.js";import"./Matcher.9dc20079.js";import"./tileUtils.3ef9ae84.js";import"./TileClipper.96955a5e.js";import"./cimAnalyzer.f8c59bac.js";import"./cimSymbolUtils.f85d4916.js";import"./schemaUtils.953db095.js";import"./MD5.f9440c6b.js";import"./util.7ad95d3e.js";import"./ComputedAttributeStorage.9152a833.js";import"./FeatureSetReader.cfa1b3ff.js";import"./centroid.76062f7d.js";import"./GraphicsView.fb49caf7.js";let n=class extends u(y){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,t){if(!this.graphicsViews.length)return null;const p=this.graphicsViews.reverse().map(i=>i.hitTest(e));return(await Promise.all(p)).flat().filter((i,s)=>(i&&(i.popupTemplate=this._popupTemplates.get(this.graphicsViews[s]),i.layer=this.layer,i.sourceLayer=this.layer),!!i))}update(e){if(this.graphicsViews)for(const t of this.graphicsViews)t.processUpdate(e)}attach(){this.handles.add([o(this.layer,"featureCollections",e=>{this._clear();for(const{popupInfo:t,featureSet:p,layerDefinition:i}of e){const s=d.fromJSON(p),m=new f(s.features),h=i.drawingInfo,c=t?g.fromJSON(t):null,r=j(h.renderer),a=new V({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:m,renderer:r,container:new S(this.view.featuresTilingScheme)});this._graphicsViewMap[s.geometryType]=a,this._popupTemplates.set(a,c),s.geometryType!=="polygon"||this.layer.polygonSymbol?s.geometryType!=="polyline"||this.layer.lineSymbol?s.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=r.symbol):this.layer.lineSymbol=r.symbol:this.layer.polygonSymbol=r.symbol,this.graphicsViews.push(a),this.container.addChild(a.container)}}),o(this.layer,"polygonSymbol",e=>{this._graphicsViewMap.polygon.renderer=new l({symbol:e})}),o(this.layer,"lineSymbol",e=>{this._graphicsViewMap.polyline.renderer=new l({symbol:e})}),o(this.layer,"pointSymbol",e=>{this._graphicsViewMap.point.renderer=new l({symbol:e})})],"georsslayerview")}detach(){this.handles.remove("georsslayerview"),this._clear()}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}_clear(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};n=b([w("esri.views.2d.layers.GeoRSSLayerView2D")],n);const oe=n;export{oe as default};
