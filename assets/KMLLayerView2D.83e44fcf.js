var q=Object.defineProperty;var x=Object.getOwnPropertySymbols;var G=Object.prototype.hasOwnProperty,E=Object.prototype.propertyIsEnumerable;var P=(i,e,t)=>e in i?q(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t,d=(i,e)=>{for(var t in e||(e={}))G.call(e,t)&&P(i,t,e[t]);if(x)for(var t of x(e))E.call(e,t)&&P(i,t,e[t]);return i};import{fX as F,aV as W,of as u,bd as z,cT as B,bR as k,eD as K,g9 as N,b0 as w,b5 as O,ht as H,hu as M,ar as U,oh as J,mO as D,mc as Q,mn as X,aX as h,aY as p,aZ as Y}from"./vendor.c8f3cc8c.js";import{b as f,g as Z,d as ii}from"./kmlUtils.a056ede3.js";import{g as ei}from"./Bitmap.2b92a227.js";import{t as ti}from"./BitmapContainer.6272fa71.js";import{l as si}from"./LayerView2D.25658a74.js";import{i as _}from"./GraphicContainer.02e1f23b.js";import{i as V}from"./BaseGraphicContainer.ed4b7b6a.js";import"./brushes.97799122.js";import"./definitions.21e97413.js";import"./Utils.b2b84829.js";import"./number.dfbabd3f.js";import"./programUtils.d5889455.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.56ac52e4.js";import"./pixelUtils.c614fa0a.js";import"./WGLContainer.465f24a3.js";import"./Container.98366c00.js";import"./EffectView.59df383f.js";import"./CIMSymbolHelper.05203bfb.js";import"./BidiEngine.aae60613.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.dd7ec7e5.js";import"./projectionSupport.a9ad5f38.js";import"./json.2d0d6862.js";import"./FeatureContainer.f5fb900c.js";import"./visualVariablesUtils.98dff1e6.js";import"./visualVariablesUtils.9dcd3ad7.js";import"./TileContainer.b3c46ff1.js";import"./Matcher.b81ee078.js";import"./tileUtils.8432939a.js";import"./TileClipper.af441dba.js";import"./cimAnalyzer.ddfafba2.js";import"./cimSymbolUtils.441175f3.js";import"./schemaUtils.3bffe16f.js";import"./MD5.f9440c6b.js";import"./util.de314230.js";import"./ComputedAttributeStorage.8a8199a7.js";import"./FeatureSetReader.2ffb1ded.js";import"./centroid.d0af71ad.js";import"./GraphicsView.991cf1e8.js";class L{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let o=class extends si(F){constructor(){super(...arguments),this._handles=new W,this._bitmapIndex=new Map,this._mapImageContainer=new ti,this._kmlVisualData=new L,this.allVisiblePoints=new u,this.allVisiblePolylines=new u,this.allVisiblePolygons=new u,this.allVisibleMapImages=new z}async hitTest(i,e){var t,s,r;return(await Promise.all([(t=this._pointsView)==null?void 0:t.hitTest(i),(s=this._polylinesView)==null?void 0:s.hitTest(i),(r=this._polygonsView)==null?void 0:r.hitTest(i)])).flat().filter(a=>!!a&&(a.layer=this.layer,a.sourceLayer=this.layer,!0))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._handles.add([this.allVisibleMapImages.on("change",i=>{i.added.forEach(e=>this._addMapImage(e)),i.removed.forEach(e=>this._removeMapImage(e))})]),this.container.addChild(this._mapImageContainer),this._polygonsView=new V({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new _(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new V({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new _(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new V({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new _(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.watch("layer.visibleSublayers",i=>{for(const[e,t]of this._kmlVisualData.allSublayers)t.visibility=0;for(const e of i){const t=this._kmlVisualData.allSublayers.get(e.id);t&&(t.visibility=1)}this._refreshCollections()}),this._fetchingPromise=this._fetchService().then(()=>{this._fetchingPromise=null,this.notifyChange("updating")})}detach(){this._handles.removeAll(),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._fetchingPromise!=null||this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&B(i.href,{responseType:"image"}).then(({data:e})=>{let t=k.fromJSON(i.extent);K(t,this.view.spatialReference)&&(t=N(t,this.view.spatialReference));const s=new ei(e,"standard");s.x=t.xmin,s.y=t.ymax,s.resolution=t.width/e.naturalWidth,s.rotation=i.rotation,this._mapImageContainer.addChild(s),this._bitmapIndex.set(i,s)})}async _getViewDependentUrl(i,e){const{viewFormat:t,viewBoundScale:s,httpQuery:r}=i;if(w(t)){if(O(e))throw new Error("Loading this network link requires a view state.");let a;if(await H(),w(s)&&s!==1){const n=new k(e.extent);n.expand(s),a=n}else a=e.extent;a=M(a,U.WGS84);const m=M(a,U.WebMercator),c=a.xmin,l=a.xmax,T=a.ymin,$=a.ymax,A=e.size[0]*e.pixelRatio,R=e.size[1]*e.pixelRatio,v=Math.max(m.width,m.height),S={"[bboxWest]":c.toString(),"[bboxEast]":l.toString(),"[bboxSouth]":T.toString(),"[bboxNorth]":$.toString(),"[lookatLon]":a.center.x.toString(),"[lookatLat]":a.center.y.toString(),"[lookatRange]":v.toString(),"[lookatTilt]":"0","[lookatHeading]":e.rotation.toString(),"[lookatTerrainLon]":a.center.x.toString(),"[lookatTerrainLat]":a.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":a.center.x.toString(),"[cameraLat]":a.center.y.toString(),"[cameraAlt]":v.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":A.toString(),"[vertPixels]":R.toString(),"[terrainEnabled]":"0","[clientVersion]":J,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},j=n=>{for(const C in n)for(const I in S)n[C]=n[C].replace(I,S[I])},y=D(t);j(y);let b={};w(r)&&(b=D(r),j(b));const g=Q(i.href);return g.query=d(d(d({},g.query),y),b),`${g.path}?${X(y)}`}return i.href}async _fetchService(){const i=new L;await this._loadVisualData(this.layer.url,i),this._kmlVisualData=i,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const e=this._kmlVisualData.allSublayers.get(i);return!!e.visibility&&(e.parentFolderId===-1||this._isSublayerVisible(e.parentFolderId))}_loadVisualData(i,e){return this._fetchParsedKML(i).then(async t=>{for(const s of t.sublayers){e.allSublayers.set(s.id,s);const r=s.points?await f(s.points):[],a=s.polylines?await f(s.polylines):[],m=s.polygons?await f(s.polygons):[],c=s.mapImages||[];if(e.allPoints.push(...r.map(l=>({item:l,sublayerId:s.id}))),e.allPolylines.push(...a.map(l=>({item:l,sublayerId:s.id}))),e.allPolygons.push(...m.map(l=>({item:l,sublayerId:s.id}))),e.allMapImages.push(...c.map(l=>({item:l,sublayerId:s.id}))),s.networkLink){const l=await this._getViewDependentUrl(s.networkLink,this.view.state);await this._loadVisualData(l,e)}}})}_fetchParsedKML(i){return Z(i,this.view.spatialReference,this.layer.refreshInterval).then(e=>ii(e.data))}_removeMapImage(i){const e=this._bitmapIndex.get(i);e&&(this._mapImageContainer.removeChild(e),this._bitmapIndex.delete(i))}};h([p()],o.prototype,"_pointsView",void 0),h([p()],o.prototype,"_polylinesView",void 0),h([p()],o.prototype,"_polygonsView",void 0),h([p()],o.prototype,"_fetchingPromise",void 0),h([p()],o.prototype,"updating",void 0),o=h([Y("esri.views.2d.layers.KMLLayerView2D")],o);const Ki=o;export{Ki as default};
