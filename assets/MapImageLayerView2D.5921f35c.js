var g=Object.defineProperty;var p=Object.getOwnPropertySymbols;var j=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var h=(e,t,i)=>t in e?g(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,n=(e,t)=>{for(var i in t||(t={}))j.call(t,i)&&h(e,i,t[i]);if(p)for(var i of p(t))u.call(t,i)&&h(e,i,t[i]);return e};import{e as a,i as m,X as f,mC as b,g as y,eh as w,d,eg as v}from"./index.a1c5dd56.js";import{t as C}from"./BitmapContainer.91bf8c40.js";import{l as x}from"./LayerView2D.762cd08a.js";import{t as U,i as I}from"./BaseGraphicContainer.dc053f97.js";import{I as G}from"./Utils.bc20347e.js";import{S}from"./ExportStrategy.5a82a5ba.js";import{y as V}from"./MapImageLayerView.33b2f02b.js";import{i as M}from"./RefreshableLayerView.553ef05e.js";import"./vendor.c6be4c00.js";import"./index.a0863940.js";/* empty css              */import"./qrcode.0911187d.js";/* empty css                 */import"./brushes.72191f86.js";import"./definitions.21e97413.js";import"./programUtils.44a18329.js";import"./number.dfbabd3f.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.89cee420.js";import"./pixelUtils.41f8268c.js";import"./WGLContainer.3b2fd5d0.js";import"./Container.d3a75275.js";import"./EffectView.1278bb79.js";import"./CIMSymbolHelper.a880d9c5.js";import"./BidiEngine.aae60613.js";import"./GeometryUtils.d4e26b77.js";import"./normalizeUtilsSync.54c6d14c.js";import"./projectionSupport.716154a1.js";import"./json.2d0d6862.js";import"./FeatureContainer.ae27f4fa.js";import"./visualVariablesUtils.00eee3c8.js";import"./visualVariablesUtils.62bbedda.js";import"./TileContainer.ffa9f91c.js";import"./Matcher.0c336864.js";import"./tileUtils.6f484de6.js";import"./TileClipper.8394d032.js";import"./cimAnalyzer.c15d2222.js";import"./cimSymbolUtils.810b9a82.js";import"./schemaUtils.25709676.js";import"./MD5.f9440c6b.js";import"./util.550c9a76.js";import"./ComputedAttributeStorage.cb18b4e6.js";import"./FeatureSetReader.75efbc58.js";import"./centroid.89738b03.js";import"./GraphicsView.b45c3d3c.js";import"./Bitmap.0398012e.js";import"./ExportImageParameters.aafb8a68.js";import"./popupUtils.7cb40dba.js";let o=class extends U{renderChildren(e){if(e.drawPhase!==G.HIGHLIGHT||(this.attributeView.bindTextures(e.context),!this.children.some(r=>r.hasData)))return;super.renderChildren(e);const{painter:t}=e,i=t.effects.highlight;i.bind(e),e.context.setColorMask(!0,!0,!0,!0),e.context.clear(16384),this._renderChildren(e,i.defines.concat(["highlightAll"])),i.draw(e),i.unbind()}};o=a([m("esri.views.2d.layers.support.HighlightGraphicContainer")],o);const q=o,_=f.getLogger("esri.views.2d.layers.MapImageLayerView2D");let s=class extends V(M(x(v))){constructor(){super(...arguments),this._highlightGraphics=new b}update(e){this.strategy.update(e).catch(t=>{y(t)||_.error(t)})}attach(){const{imageMaxWidth:e,imageMaxHeight:t,version:i}=this.layer,r=i>=10.3,c=i>=10;this._bitmapContainer=new C,this.container.addChild(this._bitmapContainer);const l=new I({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new q(this.view.featuresTilingScheme)});this.container.addChild(l.container),this.strategy=new S({container:this._bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxWidth:e,imageMaxHeight:t,imageRotationSupported:r,imageNormalizationSupported:c,hidpi:!0}),this.handles.add(this.watch("exportImageVersion",()=>this.requestUpdate()),"exportImageVersion"),this.handles.add(this.watch("view.floors",()=>this.requestUpdate()),"view.floors"),this.requestUpdate()}detach(){this.handles.remove("exportImageVersion"),this.handles.remove("view.floors"),this.strategy.destroy(),this.container.removeAllChildren(),this._bitmapContainer.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}highlight(e,t){return this._highlightGraphics.add(e),{remove:()=>{this._highlightGraphics.remove(e)}}}createFetchPopupFeaturesQueryGeometry(e,t){return w(e,t,this.view)}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(e,t,i,r){return this.layer.fetchImage(e,t,i,n({timeExtent:this.timeExtent,floors:this.view.floors},r))}};a([d()],s.prototype,"strategy",void 0),a([d()],s.prototype,"updating",void 0),s=a([m("esri.views.2d.layers.MapImageLayerView2D")],s);const Se=s;export{Se as default};
